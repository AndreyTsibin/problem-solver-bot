"""Payment handlers supporting both YooKassa (rubles) and Telegram Stars"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton

from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_user_by_telegram_id
from bot.database.models import Payment as PaymentModel
from bot.services.yookassa_service import YooKassaService
from bot.config import (
    ENABLE_YOOKASSA,
    ENABLE_TELEGRAM_STARS,
    PACKAGES_YOOKASSA,
    PACKAGES_STARS
)
from datetime import datetime
import structlog

router = Router()
logger = structlog.get_logger()


# ============================================================================
# LEVEL 0: Purchase type selection (NEW - subscriptions vs packages)
# ============================================================================

@router.callback_query(F.data == "buy_solutions")
async def show_purchase_type_selection(callback: CallbackQuery):
    """Show purchase type selection: subscriptions vs one-time packages (Level 0)"""
    text = """üí≥ <b>–ß—Ç–æ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ?</b>

<b>üìÖ –ü–æ–¥–ø–∏—Å–∫–∞</b>
‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ–∫—É–ø–∞—Ç—å
‚Ä¢ –í—ã–≥–æ–¥–Ω–µ–µ –ø—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

<b>üí∞ –†–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã</b>
‚Ä¢ –ü–æ–∫—É–ø–∞–µ—à—å –æ–¥–∏–Ω —Ä–∞–∑
‚Ä¢ –†–µ—à–µ–Ω–∏—è –Ω–µ —Å–≥–æ—Ä–∞—é—Ç
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ

<b>üí¨ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è</b>
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –î–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="show_subscriptions")
    builder.button(text="üí∞ –†–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã", callback_data="show_packages")
    builder.button(text="üí¨ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data="buy_discussions")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


# ============================================================================
# LEVEL 1: Package selection (subscriptions OR packages separately)
# ============================================================================

@router.callback_query(F.data == "show_subscriptions")
async def show_subscriptions(callback: CallbackQuery):
    """Show only subscription options (Level 1)"""
    text = """üìÖ <b>–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É</b>

<b>üî∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç</b>
‚Ä¢ 15 —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 3 –º–µ—Å—è—Ü–∞
‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ

<b>üíé –ü—Ä–µ–º–∏—É–º</b>
‚Ä¢ 30 —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ

<i>üí° –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üî∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="select_package_subscription_standard")
    builder.button(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="select_package_subscription_premium")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_solutions")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "show_packages")
async def show_packages(callback: CallbackQuery):
    """Show only one-time packages (Level 1)"""
    text = """üí∞ <b>–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç</b>

<b>üìí –°—Ç–∞—Ä—Ç–æ–≤—ã–π</b>
‚Ä¢ 5 —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º
‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ

<b>üìó –°—Ä–µ–¥–Ω–∏–π</b>
‚Ä¢ 15 —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º
‚Ä¢ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ

<b>üìï –ë–æ–ª—å—à–æ–π</b>
‚Ä¢ 30 —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º
‚Ä¢ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ

<i>üí° –†–µ—à–µ–Ω–∏—è –Ω–µ —Å–≥–æ—Ä–∞—é—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ!</i>"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üìí –°—Ç–∞—Ä—Ç–æ–≤—ã–π", callback_data="select_package_starter")
    builder.button(text="üìó –°—Ä–µ–¥–Ω–∏–π", callback_data="select_package_medium")
    builder.button(text="üìï –ë–æ–ª—å—à–æ–π", callback_data="select_package_large")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_solutions")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "buy_discussions")
async def show_discussion_packages(callback: CallbackQuery):
    """Show discussion question packages (Level 1)"""
    text = """üí¨ <b>–ü–∞–∫–µ—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è</b>

–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç:

<b>–ú–∞–ª—ã–π</b>
‚Ä¢ 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

<b>–°—Ä–µ–¥–Ω–∏–π</b>
‚Ä¢ 15 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

<i>üí° –í–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ!</i>"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ 5 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="select_package_discussion_5")
    builder.button(text="üí¨ 15 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="select_package_discussion_15")
    builder.button(text="‚óÄÔ∏è –ö –ø–∞–∫–µ—Ç–∞–º —Ä–µ—à–µ–Ω–∏–π", callback_data="buy_solutions")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


# ============================================================================
# LEVEL 2: Payment method selection (with prices)
# ============================================================================

@router.callback_query(F.data.startswith("select_package_"))
async def show_payment_methods(callback: CallbackQuery):
    """Show payment method selection (Level 2) for chosen package"""
    package_type = callback.data.replace("select_package_", "")

    # Get package info from both pricing tables
    yookassa_package = PACKAGES_YOOKASSA.get(package_type)
    stars_package = PACKAGES_STARS.get(package_type)

    if not yookassa_package and not stars_package:
        await callback.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # Build description based on package type
    package_name = yookassa_package['name'] if yookassa_package else stars_package['name']

    if package_type.startswith('subscription_'):
        description = f"<b>{package_name}</b>\n"
        solutions = yookassa_package.get('solutions', 0)
        discussion = yookassa_package.get('discussion_limit', 0)
        description += f"‚Ä¢ {solutions} —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü\n"
        description += f"‚Ä¢ {discussion} –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\n"
        description += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ"
    elif package_type.startswith('discussion_'):
        discussions = yookassa_package.get('discussions', 0)
        description = f"<b>{package_name}</b>\n"
        description += f"‚Ä¢ {discussions} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
    else:
        # One-time package
        solutions = yookassa_package.get('solutions', 0)
        discussion = yookassa_package.get('discussion_limit', 0)
        description = f"<b>{package_name}</b>\n"
        description += f"‚Ä¢ {solutions} —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º\n"
        description += f"‚Ä¢ {discussion} –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ"

    text = f"""üí≥ <b>–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>

{description}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>"""

    builder = InlineKeyboardBuilder()

    # Add YooKassa button if enabled
    if ENABLE_YOOKASSA and yookassa_package:
        yookassa_price = yookassa_package['price']
        builder.button(
            text=f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ({yookassa_price}‚ÇΩ)",
            callback_data=f"pay_yookassa_{package_type}"
        )

    # Add Telegram Stars button if enabled
    if ENABLE_TELEGRAM_STARS and stars_package:
        stars_price = stars_package['price']
        builder.button(
            text=f"‚≠êÔ∏è Telegram Stars ({stars_price}‚≠êÔ∏è)",
            callback_data=f"pay_stars_{package_type}"
        )

    # Back button
    if package_type.startswith('discussion_'):
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_discussions")
    else:
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_solutions")

    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


# ============================================================================
# YooKassa Payment Flow
# ============================================================================

@router.callback_query(F.data.startswith("pay_yookassa_"))
async def initiate_yookassa_payment(callback: CallbackQuery):
    """Initiate payment via YooKassa"""
    package_type = callback.data.replace("pay_yookassa_", "")
    package = PACKAGES_YOOKASSA.get(package_type)

    if not package:
        await callback.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # Build description
    if package_type.startswith('subscription_'):
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ {package['name']}: {package['solutions']} —Ä–µ—à–µ–Ω–∏–π/–º–µ—Å + {package['discussion_limit']} –≤–æ–ø—Ä–æ—Å–æ–≤ (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)"
    elif package_type.startswith('discussion_'):
        description = f"{package['discussions']} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
    else:
        description = f"–ü–∞–∫–µ—Ç {package['name']}: {package['solutions']} —Ä–µ—à–µ–Ω–∏–π + {package['discussion_limit']} –≤–æ–ø—Ä–æ—Å–æ–≤"

    try:
        user_id = callback.from_user.id

        # Create payment in YooKassa
        yookassa = YooKassaService()
        bot_info = await callback.bot.me()
        payment_data = await yookassa.create_payment(
            amount=package['price'],
            description=description,
            user_telegram_id=user_id,
            package_type=package_type,
            return_url=f"https://t.me/{bot_info.username}"
        )

        # Save payment to database
        async with AsyncSessionLocal() as session:
            user = await get_user_by_telegram_id(session, user_id)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            payment = PaymentModel(
                user_id=user.id,
                package_type=package_type,
                amount=package['price'],
                currency='RUB',
                provider='yookassa',
                status='pending',
                payment_id=payment_data['payment_id'],
                created_at=datetime.utcnow()
            )
            session.add(payment)
            await session.commit()

        # Send payment link to user
        text = (
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞: {package['name']}</b>\n\n"
            f"–°—É–º–º–∞: <b>{package['price']}‚ÇΩ</b>\n"
            f"{description}\n\n"
            f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É:"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                url=payment_data['confirmation_url']
            )],
            [InlineKeyboardButton(
                text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"check_payment_{payment_data['payment_id']}"
            )]
        ])

        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

        logger.info(
            "yookassa_payment_initiated",
            user_id=user_id,
            package=package_type,
            amount=package['price'],
            payment_id=payment_data['payment_id']
        )

    except Exception as e:
        logger.error("yookassa_payment_error", error=str(e), user_id=callback.from_user.id)
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery):
    """Check payment status in YooKassa"""
    try:
        payment_id = callback.data.split("_", 2)[2]

        yookassa = YooKassaService()
        payment_status = await yookassa.check_payment_status(payment_id)

        if payment_status['paid']:
            # Payment successful - activate package
            await process_successful_yookassa_payment(callback, payment_status)
        else:
            await callback.answer(
                f"‚è≥ –ü–ª–∞—Ç—ë–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ: {payment_status['status']}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                show_alert=True
            )

    except Exception as e:
        logger.error("payment_check_error", error=str(e), payment_id=payment_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


async def process_successful_yookassa_payment(callback: CallbackQuery, payment_status: dict):
    """Process successful YooKassa payment and activate package"""
    try:
        metadata = payment_status['metadata']
        user_id = int(metadata['user_telegram_id'])
        package_type = metadata['package_type']
        package = PACKAGES_YOOKASSA[package_type]

        async with AsyncSessionLocal() as session:
            from bot.database.crud_subscriptions import create_subscription

            user = await get_user_by_telegram_id(session, user_id)
            if not user:
                return

            # Activate package
            success_msg = await activate_package(session, user, package, package_type)
            await session.commit()

            await callback.message.answer(success_msg, parse_mode="HTML")
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!")

            logger.info(
                "yookassa_payment_processed",
                user_id=user_id,
                package=package_type,
                amount=payment_status['amount']
            )

    except Exception as e:
        logger.error("yookassa_payment_processing_error", error=str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞", show_alert=True)


# ============================================================================
# Telegram Stars Payment Flow
# ============================================================================

@router.callback_query(F.data.startswith("pay_stars_"))
async def initiate_stars_payment(callback: CallbackQuery):
    """Initiate payment via Telegram Stars"""
    package_type = callback.data.replace("pay_stars_", "")
    package = PACKAGES_STARS.get(package_type)

    if not package:
        await callback.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # Build title and description
    if package_type.startswith('subscription_'):
        title = f"–ü–æ–¥–ø–∏—Å–∫–∞ {package['name']}"
        description = f"{package['solutions']} —Ä–µ—à–µ–Ω–∏–π/–º–µ—Å + {package['discussion_limit']} –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ (–∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)"
    elif package_type.startswith('discussion_'):
        title = f"{package['discussions']} –≤–æ–ø—Ä–æ—Å–æ–≤"
        description = f"{package['discussions']} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π"
    else:
        title = f"–ü–∞–∫–µ—Ç {package['name']}"
        description = f"{package['solutions']} —Ä–µ—à–µ–Ω–∏–π + {package['discussion_limit']} –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ"

    prices = [LabeledPrice(label=title, amount=package['price'])]

    try:
        await callback.message.answer_invoice(
            title=title,
            description=description,
            payload=f"{package_type}_{callback.from_user.id}",
            currency="XTR",  # Telegram Stars
            prices=prices
        )
        await callback.answer()

        logger.info(
            "stars_payment_initiated",
            user_id=callback.from_user.id,
            package=package_type,
            amount=package['price']
        )

    except Exception as e:
        logger.error("stars_payment_error", error=str(e), user_id=callback.from_user.id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """Validate payment before charging (Telegram Stars)"""
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def process_successful_stars_payment(message: Message):
    """Handle successful Telegram Stars payment"""
    payment_info = message.successful_payment
    payload = payment_info.invoice_payload
    package_type = payload.rsplit("_", 1)[0]  # Extract package type from payload

    package = PACKAGES_STARS.get(package_type)
    if not package:
        logger.error("stars_package_not_found", package_type=package_type)
        return

    # Save to database and update user credits
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)

        if not user:
            logger.error("stars_user_not_found", telegram_id=message.from_user.id)
            return

        # Create payment record
        payment = PaymentModel(
            user_id=user.id,
            package_type=package_type,
            amount=payment_info.total_amount,
            currency=payment_info.currency,
            provider="telegram_stars",
            status="completed",
            telegram_payment_id=payment_info.telegram_payment_charge_id,
            created_at=datetime.utcnow()
        )
        session.add(payment)

        # Activate package
        success_msg = await activate_package(session, user, package, package_type)
        await session.commit()

    from bot.keyboards import get_main_menu_keyboard
    await message.answer(success_msg, reply_markup=get_main_menu_keyboard(), parse_mode="HTML")

    logger.info(
        "stars_payment_processed",
        user_id=message.from_user.id,
        package=package_type,
        amount=payment_info.total_amount
    )


# ============================================================================
# Shared helper: Activate package for both payment providers
# ============================================================================

async def activate_package(session, user, package: dict, package_type: str) -> str:
    """
    Activate purchased package (works for both YooKassa and Telegram Stars)

    Args:
        session: Database session
        user: User object
        package: Package configuration dict
        package_type: Package type string

    Returns:
        Success message text
    """
    from bot.database.crud_subscriptions import create_subscription

    if package_type.startswith('subscription_'):
        # Create subscription
        subscription = await create_subscription(
            session,
            user_id=user.id,
            plan=package['plan'],
            price=package['price']
        )
        user.problems_remaining += package['solutions']
        user.subscription_id = subscription.id

        success_msg = (
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            f"–¢–∞—Ä–∏—Ñ: {package['name']}\n"
            f"–†–µ—à–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {package['solutions']}\n"
            f"–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤: {package['discussion_limit']}\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü."
        )

    elif package_type.startswith('discussion_'):
        # Add discussion credits
        user.discussion_credits += package['discussions']

        success_msg = (
            f"‚úÖ <b>–í–æ–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: +{package['discussions']}\n"
            f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {user.discussion_credits}"
        )

    else:
        # One-time package
        user.problems_remaining += package['solutions']
        user.last_purchased_package = package_type

        success_msg = (
            f"‚úÖ <b>–ü–∞–∫–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"–†–µ—à–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: +{package['solutions']}\n"
            f"–í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {user.problems_remaining}\n"
            f"–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤: {package['discussion_limit']}"
        )

    return success_msg


# ============================================================================
# Legacy handlers (for backward compatibility)
# ============================================================================

@router.callback_query(F.data == "buy_starter")
async def buy_starter_package(callback: CallbackQuery):
    """Purchase Starter package (legacy handler)"""
    await show_payment_methods(callback.__class__(
        **{**callback.__dict__, 'data': 'select_package_starter'}
    ))


@router.callback_query(F.data == "buy_medium")
async def buy_medium_package(callback: CallbackQuery):
    """Purchase Medium package (legacy handler)"""
    await show_payment_methods(callback.__class__(
        **{**callback.__dict__, 'data': 'select_package_medium'}
    ))


@router.callback_query(F.data == "buy_large")
async def buy_large_package(callback: CallbackQuery):
    """Purchase Large package (legacy handler)"""
    await show_payment_methods(callback.__class__(
        **{**callback.__dict__, 'data': 'select_package_large'}
    ))


@router.callback_query(F.data == "buy_subscription_standard")
async def buy_subscription_standard(callback: CallbackQuery):
    """Purchase Standard subscription (legacy handler)"""
    await show_payment_methods(callback.__class__(
        **{**callback.__dict__, 'data': 'select_package_subscription_standard'}
    ))


@router.callback_query(F.data == "buy_subscription_premium")
async def buy_subscription_premium(callback: CallbackQuery):
    """Purchase Premium subscription (legacy handler)"""
    await show_payment_methods(callback.__class__(
        **{**callback.__dict__, 'data': 'select_package_subscription_premium'}
    ))


@router.callback_query(F.data == "subscribe_standard")
async def subscribe_standard(callback: CallbackQuery):
    """Subscribe to Standard plan (legacy handler)"""
    await show_payment_methods(callback.__class__(
        **{**callback.__dict__, 'data': 'select_package_subscription_standard'}
    ))


@router.callback_query(F.data == "subscribe_premium")
async def subscribe_premium(callback: CallbackQuery):
    """Subscribe to Premium plan (legacy handler)"""
    await show_payment_methods(callback.__class__(
        **{**callback.__dict__, 'data': 'select_package_subscription_premium'}
    ))
