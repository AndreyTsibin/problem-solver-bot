"""Payment handlers using YooKassa (rubles)"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton

from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_user_by_telegram_id
from bot.database.models import Payment as PaymentModel
from bot.services.yookassa_service import YooKassaService
from datetime import datetime
import structlog

router = Router()
logger = structlog.get_logger()

# Pricing in Russian Rubles
PACKAGES = {
    'starter': {'solutions': 5, 'price': 250, 'discussion_limit': 10, 'name': 'Starter'},
    'medium': {'solutions': 15, 'price': 600, 'discussion_limit': 15, 'name': 'Medium'},
    'large': {'solutions': 30, 'price': 1200, 'discussion_limit': 25, 'name': 'Large'},
    'discussion_5': {'discussions': 5, 'price': 100, 'name': '5 –≤–æ–ø—Ä–æ—Å–æ–≤'},
    'discussion_15': {'discussions': 15, 'price': 240, 'name': '15 –≤–æ–ø—Ä–æ—Å–æ–≤'},
    # Subscription plans (monthly recurring)
    'subscription_standard': {
        'solutions': 15,
        'price': 599,
        'discussion_limit': 15,
        'plan': 'standard',
        'name': '–ü–æ–¥–ø–∏—Å–∫–∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç'
    },
    'subscription_premium': {
        'solutions': 30,
        'price': 999,
        'discussion_limit': 25,
        'plan': 'premium',
        'name': '–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–µ–º–∏—É–º'
    },
}


@router.callback_query(F.data == "buy_solutions")
async def show_solution_packages(callback: CallbackQuery):
    """Show solution package and subscription options"""
    text = """üí≥ <b>–¢–∞—Ä–∏—Ñ—ã –∏ –ø–∞–∫–µ—Ç—ã</b>

<b>üìÜ –ü–û–î–ü–ò–°–ö–ò (–µ–∂–µ–º–µ—Å—è—á–Ω–æ):</b>

üî∑ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç</b> ‚Äî 599‚ÇΩ/–º–µ—Å
‚Ä¢ 15 —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 3 –º–µ—Å—è—Ü–∞

üíé <b>–ü—Ä–µ–º–∏—É–º</b> ‚Äî 999‚ÇΩ/–º–µ—Å
‚Ä¢ 30 —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üí∞ –†–ê–ó–û–í–´–ï –ü–ê–ö–ï–¢–´:</b>

üü¢ <b>Starter</b> ‚Äî 250‚ÇΩ
‚Ä¢ 5 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ

üîµ <b>Medium</b> ‚Äî 600‚ÇΩ
‚Ä¢ 15 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ

üü£ <b>Large</b> ‚Äî 1200‚ÇΩ
‚Ä¢ 30 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ

<i>–†–µ—à–µ–Ω–∏—è –Ω–µ —Å–≥–æ—Ä–∞—é—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ!</i>"""

    builder = InlineKeyboardBuilder()
    # Subscriptions
    builder.button(text="üî∑ –ü–æ–¥–ø–∏—Å–∫–∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç (599‚ÇΩ/–º–µ—Å)", callback_data="buy_subscription_standard")
    builder.button(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–µ–º–∏—É–º (999‚ÇΩ/–º–µ—Å)", callback_data="buy_subscription_premium")
    # One-time packages
    builder.button(text="üü¢ Starter (250‚ÇΩ)", callback_data="buy_starter")
    builder.button(text="üîµ Medium (600‚ÇΩ)", callback_data="buy_medium")
    builder.button(text="üü£ Large (1200‚ÇΩ)", callback_data="buy_large")
    builder.button(text="üí¨ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data="buy_discussions")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "buy_discussions")
async def show_discussion_packages(callback: CallbackQuery):
    """Show discussion question packages"""
    text = """üí¨ <b>–ü–∞–∫–µ—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è</b>

–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç:

üü¢ <b>–ú–∞–ª—ã–π</b> ‚Äî 100‚ÇΩ
‚Ä¢ 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

üîµ <b>–°—Ä–µ–¥–Ω–∏–π</b> ‚Äî 240‚ÇΩ (—Å–∫–∏–¥–∫–∞ 20‚ÇΩ!)
‚Ä¢ 15 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

<i>–í–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ!</i>"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üü¢ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ (100‚ÇΩ)", callback_data="buy_discussion_5")
    builder.button(text="üîµ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ (240‚ÇΩ)", callback_data="buy_discussion_15")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_solutions")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


# Payment handlers for each package
@router.callback_query(F.data == "buy_starter")
async def buy_starter_package(callback: CallbackQuery):
    """Purchase Starter package"""
    await initiate_yookassa_payment(
        callback,
        package_type='starter',
        description="–ü–∞–∫–µ—Ç Starter: 5 —Ä–µ—à–µ–Ω–∏–π + 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ"
    )


@router.callback_query(F.data == "buy_medium")
async def buy_medium_package(callback: CallbackQuery):
    """Purchase Medium package"""
    await initiate_yookassa_payment(
        callback,
        package_type='medium',
        description="–ü–∞–∫–µ—Ç Medium: 15 —Ä–µ—à–µ–Ω–∏–π + 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ"
    )


@router.callback_query(F.data == "buy_large")
async def buy_large_package(callback: CallbackQuery):
    """Purchase Large package"""
    await initiate_yookassa_payment(
        callback,
        package_type='large',
        description="–ü–∞–∫–µ—Ç Large: 30 —Ä–µ—à–µ–Ω–∏–π + 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ"
    )


@router.callback_query(F.data == "buy_discussion_5")
async def buy_discussion_5(callback: CallbackQuery):
    """Purchase 5 discussion questions"""
    await initiate_yookassa_payment(
        callback,
        package_type='discussion_5',
        description="5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
    )


@router.callback_query(F.data == "buy_discussion_15")
async def buy_discussion_15(callback: CallbackQuery):
    """Purchase 15 discussion questions"""
    await initiate_yookassa_payment(
        callback,
        package_type='discussion_15',
        description="15 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
    )


@router.callback_query(F.data == "buy_subscription_standard")
async def buy_subscription_standard(callback: CallbackQuery):
    """Purchase Standard monthly subscription"""
    await initiate_yookassa_payment(
        callback,
        package_type='subscription_standard',
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç: 15 —Ä–µ—à–µ–Ω–∏–π/–º–µ—Å + 15 –≤–æ–ø—Ä–æ—Å–æ–≤ (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)"
    )


@router.callback_query(F.data == "buy_subscription_premium")
async def buy_subscription_premium(callback: CallbackQuery):
    """Purchase Premium monthly subscription"""
    await initiate_yookassa_payment(
        callback,
        package_type='subscription_premium',
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–µ–º–∏—É–º: 30 —Ä–µ—à–µ–Ω–∏–π/–º–µ—Å + 25 –≤–æ–ø—Ä–æ—Å–æ–≤ + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)"
    )


async def initiate_yookassa_payment(callback: CallbackQuery, package_type: str, description: str):
    """
    Initiate payment via YooKassa

    Args:
        callback: Telegram callback query
        package_type: Type of package being purchased
        description: Payment description
    """
    try:
        package = PACKAGES[package_type]
        user_id = callback.from_user.id

        # Create payment in YooKassa
        yookassa = YooKassaService()
        payment_data = await yookassa.create_payment(
            amount=package['price'],
            description=description,
            user_telegram_id=user_id,
            package_type=package_type,
            return_url=f"https://t.me/{callback.bot.me.username}"
        )

        # Save payment to database
        async with AsyncSessionLocal() as session:
            user = await get_user_by_telegram_id(session, user_id)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            payment = PaymentModel(
                user_id=user.id,
                package_type=package_type,
                amount=package['price'],
                currency='RUB',
                status='pending',
                payment_id=payment_data['payment_id'],
                created_at=datetime.utcnow()
            )
            session.add(payment)
            await session.commit()

        # Send payment link to user
        text = (
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞: {package['name']}</b>\n\n"
            f"–°—É–º–º–∞: <b>{package['price']}‚ÇΩ</b>\n"
            f"{description}\n\n"
            f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É:"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                url=payment_data['confirmation_url']
            )],
            [InlineKeyboardButton(
                text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"check_payment_{payment_data['payment_id']}"
            )]
        ])

        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

        logger.info(
            "payment_initiated",
            user_id=user_id,
            package=package_type,
            amount=package['price'],
            payment_id=payment_data['payment_id']
        )

    except Exception as e:
        logger.error("payment_initiation_error", error=str(e), user_id=callback.from_user.id)
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery):
    """Check payment status in YooKassa"""
    try:
        payment_id = callback.data.split("_", 2)[2]

        yookassa = YooKassaService()
        payment_status = await yookassa.check_payment_status(payment_id)

        if payment_status['paid']:
            # Payment successful - activate package
            await process_successful_payment(callback, payment_status)
        else:
            await callback.answer(
                f"‚è≥ –ü–ª–∞—Ç—ë–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ: {payment_status['status']}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                show_alert=True
            )

    except Exception as e:
        logger.error("payment_check_error", error=str(e), payment_id=payment_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


async def process_successful_payment(callback: CallbackQuery, payment_status: dict):
    """Process successful payment and activate package"""
    try:
        metadata = payment_status['metadata']
        user_id = int(metadata['user_telegram_id'])
        package_type = metadata['package_type']
        package = PACKAGES[package_type]

        async with AsyncSessionLocal() as session:
            from bot.database.crud_subscriptions import create_subscription

            user = await get_user_by_telegram_id(session, user_id)
            if not user:
                return

            # Update payment status
            payment = await session.execute(
                f"SELECT * FROM payments WHERE payment_id = '{payment_status['payment_id']}'"
            )
            # Mark as completed

            # Activate package based on type
            if package_type.startswith('subscription_'):
                # Create subscription
                subscription = await create_subscription(
                    session,
                    user_id=user.id,
                    plan=package['plan'],
                    price=package['price']
                )
                user.problems_remaining += package['solutions']
                user.subscription_id = subscription.id

                success_msg = (
                    f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"–¢–∞—Ä–∏—Ñ: {package['name']}\n"
                    f"–†–µ—à–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {package['solutions']}\n"
                    f"–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤: {package['discussion_limit']}\n\n"
                    f"–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü."
                )

            elif package_type.startswith('discussion_'):
                # Add discussion credits
                user.discussion_credits += package['discussions']

                success_msg = (
                    f"‚úÖ <b>–í–æ–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n"
                    f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: +{package['discussions']}\n"
                    f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {user.discussion_credits}"
                )

            else:
                # One-time package
                user.problems_remaining += package['solutions']
                user.last_purchased_package = package_type

                success_msg = (
                    f"‚úÖ <b>–ü–∞–∫–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                    f"–†–µ—à–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: +{package['solutions']}\n"
                    f"–í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {user.problems_remaining}\n"
                    f"–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤: {package['discussion_limit']}"
                )

            await session.commit()

            await callback.message.answer(success_msg, parse_mode="HTML")
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!")

            logger.info(
                "payment_processed",
                user_id=user_id,
                package=package_type,
                amount=payment_status['amount']
            )

    except Exception as e:
        logger.error("payment_processing_error", error=str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞", show_alert=True)
