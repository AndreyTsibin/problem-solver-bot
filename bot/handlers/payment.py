from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_user_by_telegram_id
from bot.database.models import Payment

router = Router()

# Pricing in Telegram Stars
PACKAGES = {
    'starter': {'solutions': 5, 'price': 100, 'discussion_limit': 10},
    'medium': {'solutions': 15, 'price': 250, 'discussion_limit': 15},
    'large': {'solutions': 30, 'price': 500, 'discussion_limit': 25},
    'discussion_5': {'discussions': 5, 'price': 50},
    'discussion_15': {'discussions': 15, 'price': 120},
}


@router.callback_query(F.data == "buy_solutions")
async def show_solution_packages(callback: CallbackQuery):
    """Show solution package options"""
    text = """üí≥ **–ü–∞–∫–µ—Ç—ã —Ä–µ—à–µ–Ω–∏–π**

–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç:

**üü¢ Starter** ‚Äî 5 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –¶–µ–Ω–∞: 100 ‚≠êÔ∏è (~$2)
‚Ä¢ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: 10

**üîµ Medium** ‚Äî 15 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –¶–µ–Ω–∞: 250 ‚≠êÔ∏è (~$5)
‚Ä¢ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: 15

**üü£ Large** ‚Äî 30 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –¶–µ–Ω–∞: 500 ‚≠êÔ∏è (~$10)
‚Ä¢ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: 25

–†–µ—à–µ–Ω–∏—è –Ω–µ —Å–≥–æ—Ä–∞—é—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ!"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üü¢ Starter (100‚≠êÔ∏è)", callback_data="buy_starter")
    builder.button(text="üîµ Medium (250‚≠êÔ∏è)", callback_data="buy_medium")
    builder.button(text="üü£ Large (500‚≠êÔ∏è)", callback_data="buy_large")
    builder.button(text="üí¨ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data="buy_discussions")
    builder.adjust(1)

    from bot.keyboards import get_main_menu_keyboard
    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.message.answer("–ú–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    await callback.answer()


@router.callback_query(F.data == "buy_discussions")
async def show_discussion_packages(callback: CallbackQuery):
    """Show discussion question packages"""
    text = """üí¨ **–ü–∞–∫–µ—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è**

–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
–ö—É–ø–∏ –ø–∞–∫–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:

**üì¶ –ú–∞–ª—ã–π** ‚Äî 5 –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –¶–µ–Ω–∞: 50 ‚≠êÔ∏è (~$1)

**üì¶ –°—Ä–µ–¥–Ω–∏–π** ‚Äî 15 –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –¶–µ–Ω–∞: 120 ‚≠êÔ∏è (~$2.4)

–í–æ–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ —Ç–≤–æ–µ–º—É —Å—á—ë—Ç—É –∏ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç!"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üì¶ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ (50‚≠êÔ∏è)", callback_data="buy_discussion_5")
    builder.button(text="üì¶ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ (120‚≠êÔ∏è)", callback_data="buy_discussion_15")
    builder.button(text="üîô –ö –ø–∞–∫–µ—Ç–∞–º —Ä–µ—à–µ–Ω–∏–π", callback_data="buy_solutions")
    builder.adjust(1)

    from bot.keyboards import get_main_menu_keyboard
    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.message.answer("–ú–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    await callback.answer()


@router.callback_query(F.data == "buy_starter")
async def buy_starter_package(callback: CallbackQuery):
    """Purchase Starter package"""
    await initiate_package_payment(
        callback,
        package_type='starter',
        title="Starter Package - 5 —Ä–µ—à–µ–Ω–∏–π",
        description="5 —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º + –ª–∏–º–∏—Ç 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏"
    )


@router.callback_query(F.data == "buy_medium")
async def buy_medium_package(callback: CallbackQuery):
    """Purchase Medium package"""
    await initiate_package_payment(
        callback,
        package_type='medium',
        title="Medium Package - 15 —Ä–µ—à–µ–Ω–∏–π",
        description="15 —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º + –ª–∏–º–∏—Ç 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏"
    )


@router.callback_query(F.data == "buy_large")
async def buy_large_package(callback: CallbackQuery):
    """Purchase Large package"""
    await initiate_package_payment(
        callback,
        package_type='large',
        title="Large Package - 30 —Ä–µ—à–µ–Ω–∏–π",
        description="30 —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º + –ª–∏–º–∏—Ç 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏"
    )


@router.callback_query(F.data == "buy_discussion_5")
async def buy_discussion_5(callback: CallbackQuery):
    """Purchase 5 discussion questions"""
    await initiate_package_payment(
        callback,
        package_type='discussion_5',
        title="5 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
        description="5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
    )


@router.callback_query(F.data == "buy_discussion_15")
async def buy_discussion_15(callback: CallbackQuery):
    """Purchase 15 discussion questions"""
    await initiate_package_payment(
        callback,
        package_type='discussion_15',
        title="15 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
        description="15 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
    )


async def initiate_package_payment(callback: CallbackQuery, package_type: str, title: str, description: str):
    """Generic payment initiation"""
    package = PACKAGES[package_type]
    prices = [LabeledPrice(label=title, amount=package['price'])]

    await callback.message.answer_invoice(
        title=title,
        description=description,
        payload=f"{package_type}_{callback.from_user.id}",
        currency="XTR",  # Telegram Stars
        prices=prices
    )

    await callback.answer()


@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """Validate payment before charging"""
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """Handle successful payment"""
    payment_info = message.successful_payment
    payload = payment_info.invoice_payload
    package_type = payload.split("_")[0]

    # Save to database and update user credits
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)

        # Create payment record
        payment = Payment(
            user_id=user.id,
            amount=payment_info.total_amount,
            currency=payment_info.currency,
            provider="telegram_stars",
            status="completed",
            telegram_payment_id=payment_info.telegram_payment_charge_id
        )
        session.add(payment)

        # Update user credits based on package type
        package = PACKAGES[package_type]

        if 'solutions' in package:
            # Solution package
            user.problems_remaining += package['solutions']
            user.last_purchased_package = package_type
            success_msg = f"""üéâ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!**

‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {package['solutions']}
üí≥ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {user.problems_remaining}
üí¨ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: {package['discussion_limit']}

–ì–æ—Ç–æ–≤ —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã! üöÄ"""
        else:
            # Discussion package
            user.discussion_credits += package['discussions']
            success_msg = f"""üéâ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!**

‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {package['discussions']}
üí¨ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {user.discussion_credits}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≥–ª—É–±–∂–µ –æ–±—Å—É–∂–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è! üí°"""

        await session.commit()

    from bot.keyboards import get_main_menu_keyboard
    await message.answer(success_msg, reply_markup=get_main_menu_keyboard())
