from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_user_by_telegram_id
from bot.database.models import Payment

router = Router()

# Pricing in Telegram Stars (optimized for better conversion)
PACKAGES = {
    'starter': {'solutions': 5, 'price': 125, 'discussion_limit': 10},
    'medium': {'solutions': 15, 'price': 300, 'discussion_limit': 15},
    'large': {'solutions': 30, 'price': 600, 'discussion_limit': 25},
    'discussion_5': {'discussions': 5, 'price': 50},
    'discussion_15': {'discussions': 15, 'price': 120},
    # Subscription plans (monthly recurring)
    'subscription_standard': {'solutions': 15, 'price': 299, 'discussion_limit': 15, 'plan': 'standard'},
    'subscription_premium': {'solutions': 30, 'price': 499, 'discussion_limit': 25, 'plan': 'premium'},
}


@router.callback_query(F.data == "buy_solutions")
async def show_solution_packages(callback: CallbackQuery):
    """Show solution package and subscription options"""
    text = """üí≥ **–¢–∞—Ä–∏—Ñ—ã –∏ –ø–∞–∫–µ—Ç—ã**

**üìÜ –ü–û–î–ü–ò–°–ö–ò (–µ–∂–µ–º–µ—Å—è—á–Ω–æ):**

üî∑ **–°—Ç–∞–Ω–¥–∞—Ä—Ç** ‚Äî 299 ‚≠êÔ∏è (~599‚ÇΩ/–º–µ—Å)
‚Ä¢ 15 —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 3 –º–µ—Å—è—Ü–∞

üíé **–ü—Ä–µ–º–∏—É–º** ‚Äî 499 ‚≠êÔ∏è (~999‚ÇΩ/–º–µ—Å)
‚Ä¢ 30 —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

---

**üí∞ –†–ê–ó–û–í–´–ï –ü–ê–ö–ï–¢–´:**

üü¢ **Starter** ‚Äî 125 ‚≠êÔ∏è (~250‚ÇΩ)
‚Ä¢ 5 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ

üîµ **Medium** ‚Äî 300 ‚≠êÔ∏è (~600‚ÇΩ)
‚Ä¢ 15 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ

üü£ **Large** ‚Äî 600 ‚≠êÔ∏è (~1200‚ÇΩ)
‚Ä¢ 30 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ

–†–µ—à–µ–Ω–∏—è –Ω–µ —Å–≥–æ—Ä–∞—é—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ!"""

    builder = InlineKeyboardBuilder()
    # Subscriptions
    builder.button(text="üî∑ –ü–æ–¥–ø–∏—Å–∫–∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç (299‚≠êÔ∏è/–º–µ—Å)", callback_data="buy_subscription_standard")
    builder.button(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–µ–º–∏—É–º (499‚≠êÔ∏è/–º–µ—Å)", callback_data="buy_subscription_premium")
    # One-time packages
    builder.button(text="üü¢ Starter (125‚≠êÔ∏è)", callback_data="buy_starter")
    builder.button(text="üîµ Medium (300‚≠êÔ∏è)", callback_data="buy_medium")
    builder.button(text="üü£ Large (600‚≠êÔ∏è)", callback_data="buy_large")
    builder.button(text="üí¨ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data="buy_discussions")
    builder.adjust(1)

    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "buy_discussions")
async def show_discussion_packages(callback: CallbackQuery):
    """Show discussion question packages"""
    text = """üí¨ **–ü–∞–∫–µ—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è**

–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
–ö—É–ø–∏ –ø–∞–∫–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:

**üì¶ –ú–∞–ª—ã–π** ‚Äî 5 –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –¶–µ–Ω–∞: 50 ‚≠êÔ∏è (~100‚ÇΩ)

**üì¶ –°—Ä–µ–¥–Ω–∏–π** ‚Äî 15 –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –¶–µ–Ω–∞: 120 ‚≠êÔ∏è (~240‚ÇΩ)

–í–æ–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ —Ç–≤–æ–µ–º—É —Å—á—ë—Ç—É –∏ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç!"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üì¶ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ (50‚≠êÔ∏è)", callback_data="buy_discussion_5")
    builder.button(text="üì¶ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ (120‚≠êÔ∏è)", callback_data="buy_discussion_15")
    builder.button(text="üîô –ö –ø–∞–∫–µ—Ç–∞–º —Ä–µ—à–µ–Ω–∏–π", callback_data="buy_solutions")
    builder.adjust(1)

    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "buy_starter")
async def buy_starter_package(callback: CallbackQuery):
    """Purchase Starter package"""
    await initiate_package_payment(
        callback,
        package_type='starter',
        title="Starter Package - 5 —Ä–µ—à–µ–Ω–∏–π",
        description="5 —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º + –ª–∏–º–∏—Ç 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏"
    )


@router.callback_query(F.data == "buy_medium")
async def buy_medium_package(callback: CallbackQuery):
    """Purchase Medium package"""
    await initiate_package_payment(
        callback,
        package_type='medium',
        title="Medium Package - 15 —Ä–µ—à–µ–Ω–∏–π",
        description="15 —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º + –ª–∏–º–∏—Ç 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏"
    )


@router.callback_query(F.data == "buy_large")
async def buy_large_package(callback: CallbackQuery):
    """Purchase Large package"""
    await initiate_package_payment(
        callback,
        package_type='large',
        title="Large Package - 30 —Ä–µ—à–µ–Ω–∏–π",
        description="30 —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º + –ª–∏–º–∏—Ç 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏"
    )


@router.callback_query(F.data == "buy_discussion_5")
async def buy_discussion_5(callback: CallbackQuery):
    """Purchase 5 discussion questions"""
    await initiate_package_payment(
        callback,
        package_type='discussion_5',
        title="5 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
        description="5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
    )


@router.callback_query(F.data == "buy_discussion_15")
async def buy_discussion_15(callback: CallbackQuery):
    """Purchase 15 discussion questions"""
    await initiate_package_payment(
        callback,
        package_type='discussion_15',
        title="15 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
        description="15 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
    )


@router.callback_query(F.data == "buy_subscription_standard")
async def buy_subscription_standard(callback: CallbackQuery):
    """Purchase Standard monthly subscription"""
    await initiate_package_payment(
        callback,
        package_type='subscription_standard',
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)",
        description="15 —Ä–µ—à–µ–Ω–∏–π/–º–µ—Å + 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ"
    )


@router.callback_query(F.data == "buy_subscription_premium")
async def buy_subscription_premium(callback: CallbackQuery):
    """Purchase Premium monthly subscription"""
    await initiate_package_payment(
        callback,
        package_type='subscription_premium',
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–µ–º–∏—É–º (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)",
        description="30 —Ä–µ—à–µ–Ω–∏–π/–º–µ—Å + 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
    )


async def initiate_package_payment(callback: CallbackQuery, package_type: str, title: str, description: str):
    """Generic payment initiation"""
    package = PACKAGES[package_type]
    prices = [LabeledPrice(label=title, amount=package['price'])]

    await callback.message.answer_invoice(
        title=title,
        description=description,
        payload=f"{package_type}_{callback.from_user.id}",
        currency="XTR",  # Telegram Stars
        prices=prices
    )

    await callback.answer()


@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """Validate payment before charging"""
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """Handle successful payment"""
    payment_info = message.successful_payment
    payload = payment_info.invoice_payload
    package_type = payload.rsplit("_", 1)[0]  # Extract package type from payload

    # Save to database and update user credits
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)

        # Create payment record
        payment = Payment(
            user_id=user.id,
            amount=payment_info.total_amount,
            currency=payment_info.currency,
            provider="telegram_stars",
            status="completed",
            telegram_payment_id=payment_info.telegram_payment_charge_id
        )
        session.add(payment)

        # Update user credits based on package type
        package = PACKAGES[package_type]

        # Check if it's a subscription
        if 'plan' in package:
            # Subscription purchase
            from bot.database.crud_subscriptions import create_subscription
            subscription = await create_subscription(
                session=session,
                user_id=user.id,
                plan=package['plan'],
                price=package['price'],
                solutions_per_month=package['solutions'],
                discussion_limit=package['discussion_limit']
            )
            success_msg = f"""üéâ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**

üíé –¢–∞—Ä–∏—Ñ: {package['plan'].capitalize()}
‚úÖ –†–µ—à–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü: {package['solutions']}
üí¨ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤: {package['discussion_limit']}
üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π

–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! üöÄ"""

        elif 'solutions' in package:
            # One-time solution package
            user.problems_remaining += package['solutions']
            user.last_purchased_package = package_type
            success_msg = f"""üéâ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!**

‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {package['solutions']}
üí≥ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {user.problems_remaining}
üí¨ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: {package['discussion_limit']}

–ì–æ—Ç–æ–≤ —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã! üöÄ"""
        else:
            # Discussion package
            user.discussion_credits += package['discussions']
            success_msg = f"""üéâ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!**

‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {package['discussions']}
üí¨ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {user.discussion_credits}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≥–ª—É–±–∂–µ –æ–±—Å—É–∂–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è! üí°"""

        await session.commit()

    from bot.keyboards import get_main_menu_keyboard
    await message.answer(success_msg, reply_markup=get_main_menu_keyboard())
