"""Profile management handlers"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_or_create_user, get_user_by_telegram_id, calculate_age
from bot.states import ProfileEditStates
from datetime import datetime
import structlog

router = Router()
logger = structlog.get_logger(__name__)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    """Show user profile with all information"""
    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id
        from bot.database.crud_subscriptions import get_referral_stats

        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start")
            return

        # Calculate age from birth_date
        age = calculate_age(user.birth_date) if user.birth_date else None
        age_text = f"{age} –ª–µ—Ç" if age else "–Ω–µ —É–∫–∞–∑–∞–Ω"

        # Get referral stats
        stats = await get_referral_stats(session, user.id)

        # Get bot username for referral link
        bot_me = await message.bot.me()
        referral_link = f"https://t.me/{bot_me.username}?start=ref_{user.referral_code}"

        # Work format display
        work_format_emoji = {
            'remote': 'üè†',
            'office': 'üè¢',
            'hybrid': 'üîÄ',
            'student': 'üéì'
        }.get(user.work_format, '')

        work_format_text = {
            'remote': '–£–¥–∞–ª–µ–Ω–Ω–æ',
            'office': '–í –æ—Ñ–∏—Å–µ',
            'hybrid': '–ì–∏–±—Ä–∏–¥',
            'student': '–£—á—É—Å—å/–Ω–µ —Ä–∞–±–æ—Ç–∞—é'
        }.get(user.work_format, '–Ω–µ —É–∫–∞–∑–∞–Ω')

        # Calculate available discussion questions
        from bot.config import (
            FREE_DISCUSSION_QUESTIONS,
            STARTER_DISCUSSION_LIMIT,
            MEDIUM_DISCUSSION_LIMIT,
            LARGE_DISCUSSION_LIMIT
        )

        base_limits = {
            'starter': STARTER_DISCUSSION_LIMIT,
            'medium': MEDIUM_DISCUSSION_LIMIT,
            'large': LARGE_DISCUSSION_LIMIT
        }
        base_limit = base_limits.get(user.last_purchased_package, FREE_DISCUSSION_QUESTIONS)
        total_discussion_credits = base_limit + user.discussion_credits

        text = f"""üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

üìä –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user.gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π' if user.gender == 'female' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age_text}
‚Ä¢ –ó–∞–Ω—è—Ç–æ—Å—Ç—å: {user.occupation or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {work_format_emoji} {work_format_text}

üí≥ –ë–∞–ª–∞–Ω—Å:
‚Ä¢ –†–µ—à–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {user.problems_remaining}
‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {total_discussion_credits}

üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {stats['total_referrals']}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {stats['total_rewards']} —Ä–µ—à–µ–Ω–∏–π

–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>{referral_link}</code>"""

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile")
        builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π", callback_data="show_history")
        builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="show_payment_options")
        builder.button(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_referral_link")
        builder.adjust(1)

        await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")


@router.callback_query(F.data == "show_payment_options")
async def show_payment_options(callback: CallbackQuery):
    """Show payment options (subscriptions/packages/discussions)"""
    text = """üí≥ <b>–ß—Ç–æ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ?</b>

<b>üìÖ –ü–æ–¥–ø–∏—Å–∫–∞</b>
‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ–∫—É–ø–∞—Ç—å
‚Ä¢ –í—ã–≥–æ–¥–Ω–µ–µ –ø—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

<b>üí∞ –†–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã</b>
‚Ä¢ –ü–æ–∫—É–ø–∞–µ—à—å –æ–¥–∏–Ω —Ä–∞–∑
‚Ä¢ –†–µ—à–µ–Ω–∏—è –Ω–µ —Å–≥–æ—Ä–∞—é—Ç
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ

<b>üí¨ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è</b>
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –î–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="show_subscriptions")
    builder.button(text="üí∞ –†–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã", callback_data="show_packages")
    builder.button(text="üí¨ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data="buy_discussions")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "show_history")
async def show_history_from_profile(callback: CallbackQuery):
    """Show user's problem history"""
    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id, get_user_problems

        user = await get_user_by_telegram_id(session, callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        problems = await get_user_problems(session, user.id, limit=10)

        if not problems:
            await callback.message.edit_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            await callback.answer()
            return

        builder = InlineKeyboardBuilder()
        for p in problems:
            status_emoji = "‚úÖ" if p.status == "solved" else "‚è≥"
            title = p.title[:40] + "..." if len(p.title) > 40 else p.title
            builder.button(
                text=f"{status_emoji} {title}",
                callback_data=f"view_problem_{p.id}"
            )
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")
        builder.adjust(1)

        await callback.message.edit_text(
            "üìñ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()


@router.callback_query(F.data == "copy_referral_link")
async def copy_referral_link(callback: CallbackQuery):
    """Copy referral link notification"""
    await callback.answer(
        "–°—Å—ã–ª–∫–∞ —É–∂–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ—ë –∏ —Å–∫–æ–ø–∏—Ä—É–π",
        show_alert=True
    )


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    """Go back to profile view"""
    # Re-trigger show_profile logic via pseudo-message
    # For now, just tell user to click profile button again
    await callback.message.edit_text(
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üë§ –ü—Ä–æ—Ñ–∏–ª—å –≤ –º–µ–Ω—é –≤–Ω–∏–∑—É"
    )
    await callback.answer()


@router.callback_query(F.data == "edit_profile")
async def edit_profile_menu(callback: CallbackQuery):
    """Show what user can edit"""
    text = "‚úèÔ∏è –ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?"

    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_birth_date")
    builder.button(text="üíº –ó–∞–Ω—è—Ç–æ—Å—Ç—å", callback_data="edit_occupation")
    builder.button(text="üè† –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã", callback_data="edit_work_format")
    builder.button(text="üë§ –ü–æ–ª", callback_data="edit_gender")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


# Edit handlers for profile fields

@router.callback_query(F.data == "edit_birth_date")
async def edit_birth_date(callback: CallbackQuery, state: FSMContext):
    """Start editing birth date"""
    await state.set_state(ProfileEditStates.editing_birth_date)
    await callback.message.edit_text(
        "üìÖ –£–∫–∞–∂–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1995"
    )
    await callback.answer()


@router.message(ProfileEditStates.editing_birth_date)
async def save_birth_date_edit(message: Message, state: FSMContext):
    """Save edited birth date"""
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y")

        # Validate age (14-100 years)
        age = calculate_age(birth_date)
        if age < 14 or age > 100:
            await message.answer(
                "‚ö†Ô∏è –£–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 14 –¥–æ 100 –ª–µ—Ç)"
            )
            return

        # Update database
        async with AsyncSessionLocal() as session:
            user = await get_user_by_telegram_id(session, message.from_user.id)
            if user:
                user.birth_date = birth_date
                await session.commit()
                logger.info(f"User {user.telegram_id} updated birth_date: {birth_date}")

        await state.clear()
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
            f"–ù–∞–∂–º–∏ üë§ –ü—Ä–æ—Ñ–∏–ª—å —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        )

    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1995"
        )


@router.callback_query(F.data == "edit_occupation")
async def edit_occupation(callback: CallbackQuery, state: FSMContext):
    """Start editing occupation"""
    await state.set_state(ProfileEditStates.editing_occupation)
    await callback.message.edit_text(
        "üíº –£–∫–∞–∂–∏ —Å–≤–æ—é –∑–∞–Ω—è—Ç–æ—Å—Ç—å\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n"
        "‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä\n"
        "‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç\n"
        "‚Ä¢ –§—Ä–∏–ª–∞–Ω—Å–µ—Ä"
    )
    await callback.answer()


@router.message(ProfileEditStates.editing_occupation)
async def save_occupation_edit(message: Message, state: FSMContext):
    """Save edited occupation"""
    occupation = message.text.strip()

    if len(occupation) < 2 or len(occupation) > 100:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    # Update database
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)
        if user:
            user.occupation = occupation
            await session.commit()
            logger.info(f"User {user.telegram_id} updated occupation: {occupation}")

    await state.clear()
    await message.answer(
        f"‚úÖ –ó–∞–Ω—è—Ç–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
        f"–¢—ã —É–∫–∞–∑–∞–ª(–∞): {occupation}\n\n"
        f"–ù–∞–∂–º–∏ üë§ –ü—Ä–æ—Ñ–∏–ª—å —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    )


@router.callback_query(F.data == "edit_work_format")
async def edit_work_format(callback: CallbackQuery, state: FSMContext):
    """Start editing work format"""
    await state.set_state(ProfileEditStates.editing_work_format)

    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –£–¥–∞–ª—ë–Ω–Ω–æ", callback_data="work_remote_edit")
    builder.button(text="üè¢ –í –æ—Ñ–∏—Å–µ", callback_data="work_office_edit")
    builder.button(text="üîÄ –ì–∏–±—Ä–∏–¥", callback_data="work_hybrid_edit")
    builder.button(text="üéì –£—á—É—Å—å/–Ω–µ —Ä–∞–±–æ—Ç–∞—é", callback_data="work_student_edit")
    builder.adjust(1)

    await callback.message.edit_text(
        "üè† –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.in_(["work_remote_edit", "work_office_edit", "work_hybrid_edit", "work_student_edit"]))
async def save_work_format_edit(callback: CallbackQuery, state: FSMContext):
    """Save edited work format"""
    work_format_map = {
        'work_remote_edit': 'remote',
        'work_office_edit': 'office',
        'work_hybrid_edit': 'hybrid',
        'work_student_edit': 'student'
    }

    work_format = work_format_map.get(callback.data)
    if not work_format:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
        return

    # Update database
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, callback.from_user.id)
        if user:
            user.work_format = work_format
            await session.commit()
            logger.info(f"User {user.telegram_id} updated work_format: {work_format}")

    await state.clear()

    work_format_text = {
        'remote': 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ',
        'office': 'üè¢ –í –æ—Ñ–∏—Å–µ',
        'hybrid': 'üîÄ –ì–∏–±—Ä–∏–¥',
        'student': 'üéì –£—á—É—Å—å/–Ω–µ —Ä–∞–±–æ—Ç–∞—é'
    }.get(work_format, work_format)

    await callback.message.edit_text(
        f"‚úÖ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n"
        f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞): {work_format_text}\n\n"
        f"–ù–∞–∂–º–∏ üë§ –ü—Ä–æ—Ñ–∏–ª—å —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    )
    await callback.answer()


@router.callback_query(F.data == "edit_gender")
async def edit_gender(callback: CallbackQuery, state: FSMContext):
    """Start editing gender"""
    await state.set_state(ProfileEditStates.editing_gender)

    builder = InlineKeyboardBuilder()
    builder.button(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male_edit")
    builder.button(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female_edit")
    builder.adjust(2)

    await callback.message.edit_text(
        "üë§ –í—ã–±–µ—Ä–∏ –ø–æ–ª:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.in_(["gender_male_edit", "gender_female_edit"]))
async def save_gender_edit(callback: CallbackQuery, state: FSMContext):
    """Save edited gender"""
    gender = 'male' if callback.data == 'gender_male_edit' else 'female'

    # Update database
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, callback.from_user.id)
        if user:
            user.gender = gender
            await session.commit()
            logger.info(f"User {user.telegram_id} updated gender: {gender}")

    await state.clear()

    gender_text = 'üë® –ú—É–∂—Å–∫–æ–π' if gender == 'male' else 'üë© –ñ–µ–Ω—Å–∫–∏–π'

    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n"
        f"–¢—ã —É–∫–∞–∑–∞–ª(–∞): {gender_text}\n\n"
        f"–ù–∞–∂–º–∏ üë§ –ü—Ä–æ—Ñ–∏–ª—å —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    )
    await callback.answer()
