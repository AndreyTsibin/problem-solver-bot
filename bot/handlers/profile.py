"""Profile management handlers"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_or_create_user
from bot.handlers.start import calculate_age
import logging

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    """Show user profile with all information"""
    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id
        from bot.database.crud_subscriptions import get_referral_stats

        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start")
            return

        # Calculate age from birth_date
        age_text = f"{calculate_age(user.birth_date)} –ª–µ—Ç" if user.birth_date else "–Ω–µ —É–∫–∞–∑–∞–Ω"

        # Get referral stats
        stats = await get_referral_stats(session, user.id)

        # Get bot username for referral link
        bot_me = await message.bot.me()
        referral_link = f"https://t.me/{bot_me.username}?start=ref_{user.referral_code}"

        # Work format display
        work_format_emoji = {
            'remote': 'üè†',
            'office': 'üè¢',
            'hybrid': 'üîÄ',
            'student': 'üéì'
        }.get(user.work_format, '')

        work_format_text = {
            'remote': '–£–¥–∞–ª–µ–Ω–Ω–æ',
            'office': '–í –æ—Ñ–∏—Å–µ',
            'hybrid': '–ì–∏–±—Ä–∏–¥',
            'student': '–£—á—É—Å—å/–Ω–µ —Ä–∞–±–æ—Ç–∞—é'
        }.get(user.work_format, '–Ω–µ —É–∫–∞–∑–∞–Ω')

        text = f"""üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

üìä –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user.gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π' if user.gender == 'female' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age_text}
‚Ä¢ –ó–∞–Ω—è—Ç–æ—Å—Ç—å: {user.occupation or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {work_format_emoji} {work_format_text}

üí≥ –ë–∞–ª–∞–Ω—Å:
‚Ä¢ –†–µ—à–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {user.problems_remaining}
‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {user.discussion_credits}

üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {stats['total_referrals']}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {stats['total_rewards']} —Ä–µ—à–µ–Ω–∏–π

–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>{referral_link}</code>"""

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile")
        builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π", callback_data="show_history")
        builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="show_payment_options")
        builder.button(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_referral_link")
        builder.adjust(1)

        await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")


@router.callback_query(F.data == "show_payment_options")
async def show_payment_options(callback: CallbackQuery):
    """Show payment options (subscriptions/packages/discussions)"""
    text = """üí≥ <b>–ß—Ç–æ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ?</b>

<b>üìÖ –ü–æ–¥–ø–∏—Å–∫–∞</b>
‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ–∫—É–ø–∞—Ç—å
‚Ä¢ –í—ã–≥–æ–¥–Ω–µ–µ –ø—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

<b>üí∞ –†–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã</b>
‚Ä¢ –ü–æ–∫—É–ø–∞–µ—à—å –æ–¥–∏–Ω —Ä–∞–∑
‚Ä¢ –†–µ—à–µ–Ω–∏—è –Ω–µ —Å–≥–æ—Ä–∞—é—Ç
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ

<b>üí¨ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è</b>
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –î–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="show_subscriptions")
    builder.button(text="üí∞ –†–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã", callback_data="show_packages")
    builder.button(text="üí¨ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data="buy_discussions")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "show_history")
async def show_history_from_profile(callback: CallbackQuery):
    """Show user's problem history"""
    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id, get_user_problems

        user = await get_user_by_telegram_id(session, callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        problems = await get_user_problems(session, user.id, limit=10)

        if not problems:
            await callback.message.edit_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            await callback.answer()
            return

        builder = InlineKeyboardBuilder()
        for p in problems:
            status_emoji = "‚úÖ" if p.status == "solved" else "‚è≥"
            title = p.title[:40] + "..." if len(p.title) > 40 else p.title
            builder.button(
                text=f"{status_emoji} {title}",
                callback_data=f"view_problem_{p.id}"
            )
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")
        builder.adjust(1)

        await callback.message.edit_text(
            "üìñ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()


@router.callback_query(F.data == "copy_referral_link")
async def copy_referral_link(callback: CallbackQuery):
    """Copy referral link notification"""
    await callback.answer(
        "–°—Å—ã–ª–∫–∞ —É–∂–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ—ë –∏ —Å–∫–æ–ø–∏—Ä—É–π",
        show_alert=True
    )


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    """Go back to profile view"""
    # Re-trigger show_profile logic via pseudo-message
    # For now, just tell user to click profile button again
    await callback.message.edit_text(
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üë§ –ü—Ä–æ—Ñ–∏–ª—å –≤ –º–µ–Ω—é –≤–Ω–∏–∑—É"
    )
    await callback.answer()


@router.callback_query(F.data == "edit_profile")
async def edit_profile_menu(callback: CallbackQuery):
    """Show what user can edit"""
    text = "‚úèÔ∏è –ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?"

    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_birth_date")
    builder.button(text="üíº –ó–∞–Ω—è—Ç–æ—Å—Ç—å", callback_data="edit_occupation")
    builder.button(text="üè† –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã", callback_data="edit_work_format")
    builder.button(text="üë§ –ü–æ–ª", callback_data="edit_gender")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


# TODO: Implement edit handlers for each field (will be added in next iteration)
