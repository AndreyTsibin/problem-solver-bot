"""Problem solving flow handlers with FSM"""
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json
from datetime import datetime

from bot.states import ProblemSolvingStates
from bot.services.claude_service import ClaudeService
from bot.services.prompt_builder import PromptBuilder
from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_user_by_telegram_id, create_problem
from bot.database.models import Problem
from sqlalchemy import select

router = Router()
claude = ClaudeService()
prompt_builder = PromptBuilder()


@router.callback_query(F.data == "new_problem")
async def start_new_problem(callback: CallbackQuery, state: FSMContext):
    """Handle 'New Problem' button"""
    # Check user limits
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, callback.from_user.id)

        if user.problems_remaining <= 0:
            builder = InlineKeyboardBuilder()
            builder.button(text="üí≥ –ö—É–ø–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è", callback_data="buy_solutions")
            builder.adjust(1)

            await callback.message.answer(
                "‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–µ—à–µ–Ω–∏—è!\n\n"
                "üí≥ –ö—É–ø–∏ –ø–∞–∫–µ—Ç —Ä–µ—à–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º.",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            return

    await callback.message.answer(
        "üéØ –û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n\n"
        "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ —Ä–µ—à–∏—Ç—å?"
    )
    await state.set_state(ProblemSolvingStates.waiting_for_problem)
    await callback.answer()


@router.message(ProblemSolvingStates.waiting_for_problem)
async def receive_problem(message: Message, state: FSMContext):
    """Analyze problem type"""
    problem_text = message.text

    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É...")

    # Analyze with Claude
    analysis = await claude.analyze_problem_type(problem_text)

    # Save to state
    await state.update_data(
        problem_description=problem_text,
        problem_type=analysis['type'],
        methodology=analysis['methodology'],
        conversation_history=[],
        current_step=1
    )

    # Create problem in DB
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)

        problem = await create_problem(
            session, user.id, problem_text,
            analysis['type'], analysis['methodology']
        )
        await state.update_data(problem_id=problem.id)

        # Decrement problem credits
        user.problems_remaining -= 1
        await session.commit()

    methodology_names = {
        '5_whys': '5 –ü–æ—á–µ–º—É',
        'fishbone': 'Fishbone',
        'first_principles': 'First Principles'
    }

    await message.answer(
        f"‚úÖ –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: **{analysis['type']}**\n"
        f"üìä –ú–µ—Ç–æ–¥–∏–∫–∞: **{methodology_names.get(analysis['methodology'], analysis['methodology'])}**\n\n"
        f"–ó–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ üëá"
    )

    # Ask first question
    await state.set_state(ProblemSolvingStates.asking_questions)
    await ask_next_question(message, state)


async def ask_next_question(message: Message, state: FSMContext):
    """Generate and send next question"""
    data = await state.get_data()

    question = await claude.generate_question(
        methodology=data['methodology'],
        problem_description=data['problem_description'],
        conversation_history=data['conversation_history'],
        step=data['current_step']
    )

    # Add to history
    history = data['conversation_history']
    history.append({"role": "assistant", "content": question})
    await state.update_data(conversation_history=history)

    # Send with keyboard
    builder = InlineKeyboardBuilder()
    if data['current_step'] >= 3:
        builder.button(text="‚úÖ –•–≤–∞—Ç–∏—Ç, –¥–∞–π —Ä–µ—à–µ–Ω–∏–µ", callback_data="get_solution")
    builder.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="skip_question")
    builder.adjust(1)

    await message.answer(
        f"‚ùì –í–æ–ø—Ä–æ—Å {data['current_step']}/5:\n\n{question}",
        reply_markup=builder.as_markup()
    )


@router.message(ProblemSolvingStates.asking_questions)
async def receive_answer(message: Message, state: FSMContext):
    """Process user's answer"""
    data = await state.get_data()

    # Add answer to history
    history = data['conversation_history']
    history.append({"role": "user", "content": message.text})

    step = data['current_step'] + 1
    await state.update_data(
        conversation_history=history,
        current_step=step
    )

    # Check if done
    if step > 5:
        await generate_final_solution(message, state)
    else:
        await ask_next_question(message, state)


@router.callback_query(F.data == "get_solution")
async def handle_get_solution(callback: CallbackQuery, state: FSMContext):
    """User wants solution now"""
    await callback.message.answer("üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—à–µ–Ω–∏–µ...")
    await generate_final_solution(callback.message, state)
    await callback.answer()


async def generate_final_solution(message: Message, state: FSMContext):
    """Generate and show final solution"""
    data = await state.get_data()

    await state.set_state(ProblemSolvingStates.generating_solution)

    solution = await claude.generate_solution(
        problem_description=data['problem_description'],
        methodology=data['methodology'],
        conversation_history=data['conversation_history']
    )

    # Format solution message
    solution_text = f"""üéØ *–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:*
{solution['root_cause']}

üìä *–ê–ù–ê–õ–ò–ó:*
‚Ä¢ –ú–µ—Ç–æ–¥–∏–∫–∞: {solution['analysis']['methodology']}
‚Ä¢ –§–∞–∫—Ç–æ—Ä—ã: {', '.join(solution['analysis']['key_factors'][:3])}

üìã *–ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:*

*–°–µ–π—á–∞—Å (24—á):*
{chr(10).join(['‚ñ° ' + a for a in solution['action_plan']['immediate']])}

*–≠—Ç–∞ –Ω–µ–¥–µ–ª—è:*
{chr(10).join(['‚ñ° ' + a for a in solution['action_plan']['this_week']])}

*–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ:*
{chr(10).join(['‚ñ° ' + a for a in solution['action_plan']['long_term']])}

üìà *–ú–ï–¢–†–ò–ö–ò:*
{chr(10).join([f"‚Ä¢ {m['what']} ‚Üí {m['target']}" for m in solution['metrics']])}"""

    # Send without parse_mode to avoid markdown conflicts
    await message.answer(solution_text, parse_mode=None)

    # Save to DB
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Problem).where(Problem.id == data['problem_id'])
        )
        problem = result.scalar_one_or_none()

        if problem:
            problem.root_cause = solution['root_cause']
            problem.action_plan = json.dumps(solution['action_plan'], ensure_ascii=False)
            problem.status = 'solved'
            problem.solved_at = datetime.utcnow()
            await session.commit()

    # Offer discussion option
    data = await state.get_data()
    await state.update_data(discussion_questions_used=0)

    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", callback_data="start_discussion")
    builder.button(text="üöÄ –†–µ—à–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É", callback_data="new_problem")
    builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π", callback_data="my_problems")
    builder.adjust(1)

    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=builder.as_markup())


@router.callback_query(F.data == "skip_question")
async def skip_question(callback: CallbackQuery, state: FSMContext):
    """Skip current question"""
    data = await state.get_data()
    step = data['current_step'] + 1
    await state.update_data(current_step=step)

    if step > 5:
        await generate_final_solution(callback.message, state)
    else:
        await ask_next_question(callback.message, state)

    await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")


# Discussion system handlers
@router.callback_query(F.data == "start_discussion")
async def start_discussion(callback: CallbackQuery, state: FSMContext):
    """Start discussion mode after solution"""
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, callback.from_user.id)

        # Determine base discussion limit from last package
        base_limits = {
            'starter': 3,
            'medium': 5,
            'large': 10
        }
        base_limit = base_limits.get(user.last_purchased_package, 3)

        data = await state.get_data()
        questions_used = data.get('discussion_questions_used', 0)
        total_available = base_limit + user.discussion_credits
        remaining = total_available - questions_used

        if remaining <= 0:
            builder = InlineKeyboardBuilder()
            builder.button(text="üí¨ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="buy_discussions")
            builder.button(text="üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é", callback_data="new_problem")
            builder.adjust(1)

            await callback.message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n"
                f"üìä –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç: {base_limit}\n"
                f"üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {user.discussion_credits}\n"
                f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {questions_used}\n\n"
                "–ö—É–ø–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω–∞—á–Ω–∏ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            return

        await state.set_state(ProblemSolvingStates.discussing_solution)
        await callback.message.answer(
            f"üí¨ **–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è**\n\n"
            f"–í–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{total_available}\n\n"
            f"–ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã."
        )
        await callback.answer()


@router.message(ProblemSolvingStates.discussing_solution)
async def handle_discussion_question(message: Message, state: FSMContext):
    """Handle user's discussion question"""
    async with AsyncSessionLocal() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)

        # Determine limits
        base_limits = {
            'starter': 3,
            'medium': 5,
            'large': 10
        }
        base_limit = base_limits.get(user.last_purchased_package, 3)

        data = await state.get_data()
        questions_used = data.get('discussion_questions_used', 0)
        total_available = base_limit + user.discussion_credits
        remaining = total_available - questions_used

        if remaining <= 0:
            builder = InlineKeyboardBuilder()
            builder.button(text="üí¨ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="buy_discussions")
            builder.button(text="üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é", callback_data="new_problem")
            builder.adjust(1)

            await message.answer(
                "‚ùå –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!",
                reply_markup=builder.as_markup()
            )
            return

        # Generate answer using Claude
        await message.answer("ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

        conversation_history = data.get('conversation_history', [])
        conversation_history.append({"role": "user", "content": message.text})

        answer = await claude.generate_question(
            methodology=data.get('methodology', '5_whys'),
            problem_description=data.get('problem_description', ''),
            conversation_history=conversation_history,
            step=questions_used + 1
        )

        conversation_history.append({"role": "assistant", "content": answer})

        # Increment counter and deduct from appropriate pool
        questions_used += 1
        if questions_used > base_limit:
            # Deduct from purchased credits
            credits_used_from_purchased = questions_used - base_limit
            user.discussion_credits = max(0, user.discussion_credits - 1)
            await session.commit()

        await state.update_data(
            discussion_questions_used=questions_used,
            conversation_history=conversation_history
        )

        remaining = total_available - questions_used

        await message.answer(f"üí° {answer}\n\nüìä –í–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{total_available}")

        if remaining == 0:
            builder = InlineKeyboardBuilder()
            builder.button(text="üí¨ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="buy_discussions")
            builder.button(text="üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é", callback_data="new_problem")
            builder.adjust(1)

            await message.answer(
                "‚úÖ –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!",
                reply_markup=builder.as_markup()
            )