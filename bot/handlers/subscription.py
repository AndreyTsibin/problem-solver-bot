"""Subscription management handlers"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_or_create_user
from bot.database.crud_subscriptions import get_active_subscription, cancel_subscription
from bot.config import SUBSCRIPTION_PLANS
from datetime import datetime
import structlog

logger = structlog.get_logger()
router = Router()


@router.message(Command("subscription"))
async def handle_subscription_command(message: Message):
    """Handle /subscription command - show subscription status"""
    telegram_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    try:
        async with AsyncSessionLocal() as session:
            # Get or create user
            user = await get_or_create_user(
                session, telegram_id, username, first_name
            )

            # Get active subscription
            subscription = await get_active_subscription(session, user.id)

            if subscription:
                # User has active subscription
                plan_info = SUBSCRIPTION_PLANS.get(subscription.plan, {})
                plan_name = plan_info.get('name', subscription.plan.capitalize())

                # Calculate days until renewal
                days_until = (subscription.next_billing_date - datetime.utcnow()).days

                text = (
                    f"üíé <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{plan_name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: {subscription.price} ‚≠êÔ∏è/–º–µ—Å—è—Ü\n"
                    f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {subscription.next_billing_date.strftime('%d.%m.%Y')}\n"
                    f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until}\n\n"
                    f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {user.problems_remaining}\n"
                    f"üí¨ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤: {subscription.discussion_limit}\n\n"
                    f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü."
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å —Ç–∞—Ä–∏—Ñ",
                        callback_data="upgrade_subscription"
                    )],
                    [InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data="cancel_subscription_confirm"
                    )]
                ])

            else:
                # User has no active subscription
                text = (
                    f"üí≥ <b>–†–µ—à–µ–Ω–∏–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:</b> {user.problems_remaining}\n\n"
                    f"–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!\n\n"
                    f"<b>üî∏ –°–¢–ê–ù–î–ê–†–¢</b> ‚Äî 599‚ÇΩ/–º–µ—Å—è—Ü\n"
                    f"- 15 —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü\n"
                    f"- 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏\n"
                    f"- –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 3 –º–µ—Å—è—Ü–∞\n\n"
                    f"<b>üíé –ü–†–ï–ú–ò–£–ú</b> ‚Äî 999‚ÇΩ/–º–µ—Å—è—Ü\n"
                    f"- 30 —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü\n"
                    f"- 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏\n"
                    f"- –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è\n"
                    f"- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n"
                    f"üí° –†–µ—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü!"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üî∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç (599‚ÇΩ)",
                        callback_data="select_package_subscription_standard"
                    )],
                    [InlineKeyboardButton(
                        text="üíé –ü—Ä–µ–º–∏—É–º (999‚ÇΩ)",
                        callback_data="select_package_subscription_premium"
                    )],
                    [InlineKeyboardButton(
                        text="üí∏ –†–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã",
                        callback_data="show_packages"
                    )]
                ])

            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error("subscription_command_error", error=str(e), user_id=telegram_id)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.callback_query(F.data == "cancel_subscription_confirm")
async def handle_cancel_subscription_confirm(callback: CallbackQuery):
    """Show cancellation confirmation"""
    text = (
        "‚ö†Ô∏è <b>–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?</b>\n\n"
        "–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ "
        "–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n\n"
        "–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–µ—à–µ–Ω–∏—è –æ—Å—Ç–∞–Ω—É—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã."
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="cancel_subscription_confirmed"
        )],
        [InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å",
            callback_data="cancel_subscription_abort"
        )]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "cancel_subscription_confirmed")
async def handle_cancel_subscription_confirmed(callback: CallbackQuery):
    """Cancel subscription after confirmation"""
    telegram_id = callback.from_user.id

    try:
        async with AsyncSessionLocal() as session:
            from bot.database.crud import get_user_by_telegram_id

            user = await get_user_by_telegram_id(session, telegram_id)
            if not user or not user.subscription_id:
                await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            subscription = await get_active_subscription(session, user.id)
            if not subscription:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            # Cancel subscription
            await cancel_subscription(session, subscription.id)

            text = (
                f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ {subscription.next_billing_date.strftime('%d.%m.%Y')}.\n"
                f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.\n\n"
                f"–¢—ã –º–æ–∂–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç: /subscription"
            )

            await callback.message.edit_text(text, parse_mode="HTML")
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

            logger.info(f"Subscription cancelled for user {telegram_id}")

    except Exception as e:
        logger.error("cancel_subscription_error", error=str(e), user_id=telegram_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)


@router.callback_query(F.data == "cancel_subscription_abort")
async def handle_cancel_subscription_abort(callback: CallbackQuery):
    """Abort subscription cancellation"""
    await callback.message.edit_text(
        "‚úÖ –û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π.",
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "upgrade_subscription")
async def handle_upgrade_subscription(callback: CallbackQuery):
    """Show upgrade options"""
    telegram_id = callback.from_user.id

    try:
        async with AsyncSessionLocal() as session:
            from bot.database.crud import get_user_by_telegram_id

            user = await get_user_by_telegram_id(session, telegram_id)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            subscription = await get_active_subscription(session, user.id)
            if not subscription:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            current_plan = subscription.plan

            if current_plan == 'standard':
                text = (
                    "‚¨ÜÔ∏è <b>–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞</b>\n\n"
                    "–ü–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ <b>–ü—Ä–µ–º–∏—É–º</b> –∏ –ø–æ–ª—É—á–∏:\n\n"
                    "‚Ä¢ 30 —Ä–µ—à–µ–Ω–∏–π/–º–µ—Å—è—Ü (–≤–º–µ—Å—Ç–æ 15)\n"
                    "‚Ä¢ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ (–≤–º–µ—Å—Ç–æ 15)\n"
                    "‚Ä¢ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (–≤–º–µ—Å—Ç–æ 3 –º–µ—Å—è—Ü–µ–≤)\n"
                    "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n"
                    "üí∞ –î–æ–ø–ª–∞—Ç–∞: 200‚ÇΩ/–º–µ—Å—è—Ü (–≤—Å–µ–≥–æ 999‚ÇΩ)"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚úÖ –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ –ü—Ä–µ–º–∏—É–º",
                        callback_data="upgrade_to_premium"
                    )],
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="back_to_subscription"
                    )]
                ])

            else:  # premium
                text = (
                    "‚úÖ <b>–£ —Ç–µ–±—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ!</b>\n\n"
                    "–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–∞—Ä–∏—Ñ <b>–ü—Ä–µ–º–∏—É–º</b> ‚Äî "
                    "–ª—É—á—à–µ–µ —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å! üéâ"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="back_to_subscription"
                    )]
                ])

            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

    except Exception as e:
        logger.error("upgrade_subscription_error", error=str(e), user_id=telegram_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data == "upgrade_to_premium")
async def handle_upgrade_to_premium(callback: CallbackQuery):
    """Upgrade from standard to premium (requires payment handler)"""
    # This will be handled by payment.py
    # For now, redirect to payment flow
    await callback.answer(
        "–§—É–Ω–∫—Ü–∏—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏!",
        show_alert=True
    )


@router.callback_query(F.data == "back_to_subscription")
async def handle_back_to_subscription(callback: CallbackQuery):
    """Go back to subscription info"""
    # Re-trigger subscription command
    from aiogram.types import Message as MessageType

    # Create a pseudo-message to re-use the command handler
    await handle_subscription_command(callback.message)
    await callback.answer()


# show_packages handler moved to payment.py to avoid duplication
