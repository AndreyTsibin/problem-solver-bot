from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_or_create_user
from bot.keyboards import get_main_menu_keyboard
import logging
import asyncio
from datetime import datetime, timedelta

router = Router()
logger = logging.getLogger(__name__)

# Track last /start call per user to prevent duplicates
_last_start_calls = {}
_THROTTLE_SECONDS = 2


def _get_solutions_word(count: int) -> str:
    """Get correct Russian word form for '—Ä–µ—à–µ–Ω–∏–µ' based on count"""
    if count % 10 == 1 and count % 100 != 11:
        return "—Ä–µ—à–µ–Ω–∏–µ"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        return "—Ä–µ—à–µ–Ω–∏—è"
    else:
        return "—Ä–µ—à–µ–Ω–∏–π"


@router.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command"""
    user_id = message.from_user.id
    now = datetime.now()

    # Check if we recently handled /start for this user (throttling)
    if user_id in _last_start_calls:
        time_since_last = (now - _last_start_calls[user_id]).total_seconds()
        if time_since_last < _THROTTLE_SECONDS:
            logger.info(f"Ignoring duplicate /start from user {user_id} (called {time_since_last:.2f}s ago)")
            return

    # Update last call time
    _last_start_calls[user_id] = now

    logger.info(f"cmd_start called for user {message.from_user.id} (@{message.from_user.username})")
    logger.info(f"Message text: '{message.text}', Message ID: {message.message_id}")

    # Get or create user in database
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(
            session=session,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )

    # Welcome message
    welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ—É—á –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º. –ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.

üí¨ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ó–∞–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —É–≤–∏–¥–µ—Ç—å —Å—É—Ç—å
‚Ä¢ –ù–∞—Ö–æ–∂—É –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–º–ø—Ç–æ–º—ã
‚Ä¢ –î–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏

üéØ **–° —á–µ–º –ø–æ–º–æ–≥–∞—é:**
–†–∞–±–æ—Ç–∞, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –ø—Ä–∏–≤—ã—á–∫–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, –∫–∞—Ä—å–µ—Ä–∞ ‚Äî –ª—é–±–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –≥–¥–µ –Ω—É–∂–Ω–∞ —è—Å–Ω–æ—Å—Ç—å –∏ –ø–ª–∞–Ω.

‚ö° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º:**
1. –¢—ã –æ–ø–∏—Å—ã–≤–∞–µ—à—å –ø—Ä–æ–±–ª–µ–º—É (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –Ø –∑–∞–¥–∞—é 3-5 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
3. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ—à–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏

üí≥ **–£ —Ç–µ–±—è –µ—Å—Ç—å:** {user.problems_remaining} {_get_solutions_word(user.problems_remaining)}

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏! üëá"""

    logger.info(f"Sending welcome message to user {message.from_user.id}")
    await message.answer(
        text=welcome_text,
        reply_markup=get_main_menu_keyboard()
    )
    logger.info(f"Welcome message sent to user {message.from_user.id}")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    help_text = """üìö **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:**

1Ô∏è‚É£ –ù–∞–∂–º–∏ "üöÄ –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"
2Ô∏è‚É£ –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3Ô∏è‚É£ –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –∑–∞–¥–∞–º 3-5 —à—Ç—É–∫
4Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–π

üí° **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–º–æ–≥–∞—é:**

üèÉ –ü—Ä–∏–≤—ã—á–∫–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
"–ù–µ –º–æ–≥—É –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º"
"–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–µ–¥–∞—é –≤–µ—á–µ—Ä–æ–º"

üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞
"–í—ã–≥–æ—Ä–∞—é –Ω–∞ —Ä–∞–±–æ—Ç–µ, –Ω–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏"
"–ù–µ –∑–Ω–∞—é –∫—É–¥–∞ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ"

üí∞ –§–∏–Ω–∞–Ω—Å—ã
"–î–µ–Ω—å–≥–∏ —É—Ç–µ–∫–∞—é—Ç —Å–∫–≤–æ–∑—å –ø–∞–ª—å—Ü—ã"
"–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å"

üë• –û—Ç–Ω–æ—à–µ–Ω–∏—è
"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º"
"–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã"

‚úÖ **–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º:**
‚Ä¢ –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –∞ –Ω–µ –æ–±—â—É—é —Ç–µ–º—É
‚Ä¢ –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
‚Ä¢ –ù–µ —Å–ø–µ—à–∏, –≤–¥—É–º—á–∏–≤–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

üéÅ **–£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è** ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""

    await message.answer(help_text, reply_markup=get_main_menu_keyboard())

@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """Handle help button press (legacy inline button)"""
    help_text = """üìö **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:**

1Ô∏è‚É£ –ù–∞–∂–º–∏ "üöÄ –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É" –≤ –º–µ–Ω—é
2Ô∏è‚É£ –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3Ô∏è‚É£ –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –∑–∞–¥–∞–º 3-5 —à—Ç—É–∫
4Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–π

üí° **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–º–æ–≥–∞—é:**

üèÉ –ü—Ä–∏–≤—ã—á–∫–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
"–ù–µ –º–æ–≥—É –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º"
"–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–µ–¥–∞—é –≤–µ—á–µ—Ä–æ–º"

üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞
"–í—ã–≥–æ—Ä–∞—é –Ω–∞ —Ä–∞–±–æ—Ç–µ, –Ω–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏"
"–ù–µ –∑–Ω–∞—é –∫—É–¥–∞ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ"

üí∞ –§–∏–Ω–∞–Ω—Å—ã
"–î–µ–Ω—å–≥–∏ —É—Ç–µ–∫–∞—é—Ç —Å–∫–≤–æ–∑—å –ø–∞–ª—å—Ü—ã"
"–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å"

üë• –û—Ç–Ω–æ—à–µ–Ω–∏—è
"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º"
"–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã"

‚úÖ **–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º:**
‚Ä¢ –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –∞ –Ω–µ –æ–±—â—É—é —Ç–µ–º—É
‚Ä¢ –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
‚Ä¢ –ù–µ —Å–ø–µ—à–∏, –≤–¥—É–º—á–∏–≤–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

üéÅ **–£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è** ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""

    await callback.message.answer(help_text, reply_markup=get_main_menu_keyboard())
    await callback.answer()


# Text button handlers for persistent keyboard
@router.message(F.text == "üöÄ –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É")
async def menu_new_problem(message: Message, state: FSMContext):
    """Handle 'New Problem' menu button"""
    from bot.states import ProblemSolvingStates

    # Check user limits
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(
            session=session,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )

        if user.problems_remaining <= 0:
            builder = InlineKeyboardBuilder()
            builder.button(text="üí≥ –ö—É–ø–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è", callback_data="buy_solutions")
            builder.adjust(1)

            await message.answer(
                "‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–µ—à–µ–Ω–∏—è!\n\n"
                "üí≥ –ö—É–ø–∏ –ø–∞–∫–µ—Ç —Ä–µ—à–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º.",
                reply_markup=builder.as_markup()
            )
            return

    await message.answer(
        "üéØ –û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n\n"
        "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ —Ä–µ—à–∏—Ç—å?"
    )
    await state.set_state(ProblemSolvingStates.waiting_for_problem)


@router.message(F.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è")
async def menu_history(message: Message):
    """Handle 'History' menu button"""
    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id, get_user_problems

        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start")
            return

        problems = await get_user_problems(session, user.id, limit=10)

        if not problems:
            await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            return

        builder = InlineKeyboardBuilder()
        for p in problems:
            status_emoji = "‚úÖ" if p.status == "solved" else "‚è≥"
            title = p.title[:40] + "..." if len(p.title) > 40 else p.title
            builder.button(
                text=f"{status_emoji} {title}",
                callback_data=f"view_problem_{p.id}"
            )
        builder.adjust(1)

        await message.answer(
            "üìñ **–ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π:**",
            reply_markup=builder.as_markup()
        )


@router.message(F.text == "üí≥ –ü—Ä–µ–º–∏—É–º")
async def menu_premium(message: Message):
    """Handle 'Premium' menu button"""
    text = """üí≥ **–ü–∞–∫–µ—Ç—ã —Ä–µ—à–µ–Ω–∏–π**

–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç:

**üü¢ Starter** ‚Äî 5 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –¶–µ–Ω–∞: 100 ‚≠êÔ∏è (~$2)
‚Ä¢ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: 10

**üîµ Medium** ‚Äî 15 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –¶–µ–Ω–∞: 250 ‚≠êÔ∏è (~$5)
‚Ä¢ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: 15

**üü£ Large** ‚Äî 30 —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –¶–µ–Ω–∞: 500 ‚≠êÔ∏è (~$10)
‚Ä¢ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: 25

–†–µ—à–µ–Ω–∏—è –Ω–µ —Å–≥–æ—Ä–∞—é—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ!"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üü¢ Starter (100‚≠êÔ∏è)", callback_data="buy_starter")
    builder.button(text="üîµ Medium (250‚≠êÔ∏è)", callback_data="buy_medium")
    builder.button(text="üü£ Large (500‚≠êÔ∏è)", callback_data="buy_large")
    builder.button(text="üí¨ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data="buy_discussions")
    builder.adjust(1)

    await message.answer(text, reply_markup=builder.as_markup())


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def menu_help(message: Message):
    """Handle 'Help' menu button"""
    await cmd_help(message)
