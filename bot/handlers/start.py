from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.database.engine import AsyncSessionLocal
from bot.database.crud import get_or_create_user, calculate_age
from bot.keyboards import get_main_menu_keyboard
from bot.states import OnboardingStates, ProblemSolvingStates
import structlog
import asyncio
from datetime import datetime, timedelta
from typing import Tuple, Union

router = Router()
logger = structlog.get_logger(__name__)

# Track last /start call per user to prevent duplicates
_last_start_calls = {}
_THROTTLE_SECONDS = 2


def validate_birth_date(text: str) -> Tuple[bool, Union[datetime, str]]:
    """Validate birth date format and value"""
    try:
        # Parse DD.MM.YYYY
        birth_date = datetime.strptime(text.strip(), "%d.%m.%Y")

        # Check not in future
        if birth_date > datetime.now():
            return False, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º ü§î"

        # Check age range (14-100 years)
        age = calculate_age(birth_date)
        if age < 14:
            return False, "–¢–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 14 –ª–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"
        if age > 100:
            return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"

        return True, birth_date

    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚ö†Ô∏è\n\n–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1995"




def _get_solutions_word(count: int) -> str:
    """Get correct Russian word form for '—Ä–µ—à–µ–Ω–∏–µ' based on count"""
    if count % 10 == 1 and count % 100 != 11:
        return "—Ä–µ—à–µ–Ω–∏–µ"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        return "—Ä–µ—à–µ–Ω–∏—è"
    else:
        return "—Ä–µ—à–µ–Ω–∏–π"


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command with optional referral code"""
    user_id = message.from_user.id
    now = datetime.now()

    # Check if we recently handled /start for this user (throttling)
    if user_id in _last_start_calls:
        time_since_last = (now - _last_start_calls[user_id]).total_seconds()
        if time_since_last < _THROTTLE_SECONDS:
            logger.info(f"Ignoring duplicate /start from user {user_id} (called {time_since_last:.2f}s ago)")
            return

    # Update last call time
    _last_start_calls[user_id] = now

    logger.info(f"cmd_start called for user {message.from_user.id} (@{message.from_user.username})")
    logger.info(f"Message text: '{message.text}', Message ID: {message.message_id}")

    # Parse referral code from deep link (e.g., /start ref_ABC12345)
    referral_code = None
    if message.text and len(message.text.split()) > 1:
        param = message.text.split()[1]
        if param.startswith("ref_"):
            referral_code = param[4:]  # Remove "ref_" prefix
            logger.info(f"Detected referral code: {referral_code}")

    # Get or create user in database
    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id
        from bot.database.crud_subscriptions import get_user_by_referral_code, create_referral

        # Check if user is new
        existing_user = await get_user_by_telegram_id(session, message.from_user.id)
        is_new_user = existing_user is None

        user = await get_or_create_user(
            session=session,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )

        # Check if user has gender set
        if not user.gender:
            # Store referral code in state for later use
            if referral_code:
                await state.update_data(referral_code=referral_code)

            # Ask for gender first
            from bot.states import OnboardingStates
            await state.set_state(OnboardingStates.choosing_gender)

            gender_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–Ø —Ç–≤–æ–π –∫–æ—É—á –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º.

‚ö° <b>–ß—Ç–æ–±—ã –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –º–Ω–µ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –ø–æ–ª.</b>

<b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?</b>
–ú—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã –ø–æ-—Ä–∞–∑–Ω–æ–º—É –ø–æ–¥—Ö–æ–¥—è—Ç –∫ –ø—Ä–æ–±–ª–µ–º–∞–º:
‚Ä¢ –†–∞–∑–Ω—ã–π —Ñ–æ–∫—É—Å –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –†–∞–∑–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –†–∞–∑–Ω—ã–π —Å—Ç–∏–ª—å –∞–Ω–∞–ª–∏–∑–∞

–≠—Ç–æ –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è!

–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:"""

            builder = InlineKeyboardBuilder()
            builder.button(text="üë® –Ø –ø–∞—Ä–µ–Ω—å", callback_data="gender_male")
            builder.button(text="üë© –Ø –¥–µ–≤—É—à–∫–∞", callback_data="gender_female")
            builder.adjust(2)

            await message.answer(
                text=gender_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
            logger.info(f"Requesting gender from new user {message.from_user.id}")
            return

        # Process referral if user is new and code is valid
        referral_bonus_message = ""
        if is_new_user and referral_code:
            try:
                referrer = await get_user_by_referral_code(session, referral_code)
                if referrer and referrer.id != user.id:
                    # Create referral record and grant rewards
                    await create_referral(session, referrer.id, user.id)
                    referral_bonus_message = "\n\n‚ú® <b>–ë–æ–Ω—É—Å!</b> –¢—ã –ø–æ–ª—É—á–∏–ª +1 —Ä–µ—à–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∞!\n"

                    # Notify referrer
                    try:
                        await message.bot.send_message(
                            referrer.telegram_id,
                            "üéâ <b>–¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!</b>\n\n"
                            "–¢—ã –ø–æ–ª—É—á–∏–ª +1 –±–æ–Ω—É—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.warning(f"Failed to notify referrer {referrer.telegram_id}: {e}")

                    logger.info(f"Referral processed: {referrer.id} -> {user.id}")
                else:
                    logger.info(f"Invalid referral: code={referral_code}, referrer={referrer}")
            except Exception as e:
                logger.error(f"Error processing referral: {e}")

    # Welcome message
    welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ—É—á –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º. –ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.

üí¨ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ó–∞–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —É–≤–∏–¥–µ—Ç—å —Å—É—Ç—å
‚Ä¢ –ù–∞—Ö–æ–∂—É –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–º–ø—Ç–æ–º—ã
‚Ä¢ –î–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏

‚ö° <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º:</b>
1. –¢—ã –æ–ø–∏—Å—ã–≤–∞–µ—à—å –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
2. –Ø –∑–∞–¥–∞—é 3-5 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
3. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ—à–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏{referral_bonus_message}

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏! üëá"""

    logger.info(f"Sending welcome message to user {message.from_user.id}")
    await message.answer(
        text=welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )
    logger.info(f"Welcome message sent to user {message.from_user.id}")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    help_text = """üìö **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:**

1Ô∏è‚É£ –ù–∞–∂–º–∏ "üöÄ –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"
2Ô∏è‚É£ –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
3Ô∏è‚É£ –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –∑–∞–¥–∞–º 3-5 —à—Ç—É–∫
4Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–π

üí° **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–º–æ–≥–∞—é:**

üèÉ –ü—Ä–∏–≤—ã—á–∫–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
"–ù–µ –º–æ–≥—É –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º"
"–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–µ–¥–∞—é –≤–µ—á–µ—Ä–æ–º"

üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞
"–í—ã–≥–æ—Ä–∞—é –Ω–∞ —Ä–∞–±–æ—Ç–µ, –Ω–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏"
"–ù–µ –∑–Ω–∞—é –∫—É–¥–∞ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ"

üí∞ –§–∏–Ω–∞–Ω—Å—ã
"–î–µ–Ω—å–≥–∏ —É—Ç–µ–∫–∞—é—Ç —Å–∫–≤–æ–∑—å –ø–∞–ª—å—Ü—ã"
"–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å"

üë• –û—Ç–Ω–æ—à–µ–Ω–∏—è
"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º"
"–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã"

‚úÖ **–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º:**
‚Ä¢ –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –∞ –Ω–µ –æ–±—â—É—é —Ç–µ–º—É
‚Ä¢ –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
‚Ä¢ –ù–µ —Å–ø–µ—à–∏, –≤–¥—É–º—á–∏–≤–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

üéÅ **–£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è** ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""

    await message.answer(help_text, reply_markup=get_main_menu_keyboard())

@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """Handle help button press (legacy inline button)"""
    help_text = """üìö **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:**

1Ô∏è‚É£ –ù–∞–∂–º–∏ "üöÄ –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É" –≤ –º–µ–Ω—é
2Ô∏è‚É£ –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
3Ô∏è‚É£ –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –∑–∞–¥–∞–º 3-5 —à—Ç—É–∫
4Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–π

üí° **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–º–æ–≥–∞—é:**

üèÉ –ü—Ä–∏–≤—ã—á–∫–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
"–ù–µ –º–æ–≥—É –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º"
"–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–µ–¥–∞—é –≤–µ—á–µ—Ä–æ–º"

üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞
"–í—ã–≥–æ—Ä–∞—é –Ω–∞ —Ä–∞–±–æ—Ç–µ, –Ω–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏"
"–ù–µ –∑–Ω–∞—é –∫—É–¥–∞ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ"

üí∞ –§–∏–Ω–∞–Ω—Å—ã
"–î–µ–Ω—å–≥–∏ —É—Ç–µ–∫–∞—é—Ç —Å–∫–≤–æ–∑—å –ø–∞–ª—å—Ü—ã"
"–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å"

üë• –û—Ç–Ω–æ—à–µ–Ω–∏—è
"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º"
"–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã"

‚úÖ **–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º:**
‚Ä¢ –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –∞ –Ω–µ –æ–±—â—É—é —Ç–µ–º—É
‚Ä¢ –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
‚Ä¢ –ù–µ —Å–ø–µ—à–∏, –≤–¥—É–º—á–∏–≤–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

üéÅ **–£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è** ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""

    await callback.message.answer(help_text, reply_markup=get_main_menu_keyboard())
    await callback.answer()


# Text button handlers for persistent keyboard
@router.message(F.text == "üöÄ –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É")
async def menu_new_problem(message: Message, state: FSMContext):
    """Handle 'New Problem' menu button"""
    from bot.states import ProblemSolvingStates

    # Check user limits
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(
            session=session,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )

        if user.problems_remaining <= 0:
            builder = InlineKeyboardBuilder()
            builder.button(text="üí≥ –ö—É–ø–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è", callback_data="buy_solutions")
            builder.adjust(1)

            await message.answer(
                "‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–µ—à–µ–Ω–∏—è!\n\n"
                "üí≥ –ö—É–ø–∏ –ø–∞–∫–µ—Ç —Ä–µ—à–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º.",
                reply_markup=builder.as_markup()
            )
            return

    await message.answer(
        "üéØ –û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n"
        "üìù –£–∫–∞–∂–∏:\n"
        "‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?\n"
        "‚Ä¢ –ö–∞–∫ –¥–æ–ª–≥–æ —ç—Ç–æ –¥–ª–∏—Ç—Å—è?\n"
        "‚Ä¢ –ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª(–∞)?\n\n"
        "üí° –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—à—å ‚Äî —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Ä–µ—à–µ–Ω–∏–µ!"
    )
    await state.set_state(ProblemSolvingStates.waiting_for_problem)


# Old menu handlers removed - functionality moved to profile.py


# Gender selection handlers
@router.callback_query(F.data == "gender_male")
async def handle_gender_male(callback: CallbackQuery, state: FSMContext):
    """Handle male gender selection"""
    from bot.states import OnboardingStates

    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id

        user = await get_user_by_telegram_id(session, callback.from_user.id)
        if user:
            user.gender = 'male'
            await session.commit()
            logger.info(f"User {user.telegram_id} selected gender: male")

    # Move to birth date input
    await state.set_state(OnboardingStates.entering_birth_date)

    await callback.message.edit_text(
        "üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1995\n\n"
        "–í–æ–∑—Ä–∞—Å—Ç –≤–∞–∂–µ–Ω –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ ‚Äî —Ä–µ—à–µ–Ω–∏—è –¥–ª—è 20 –∏ 40 –ª–µ—Ç —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è.",
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "gender_female")
async def handle_gender_female(callback: CallbackQuery, state: FSMContext):
    """Handle female gender selection"""
    from bot.states import OnboardingStates

    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id

        user = await get_user_by_telegram_id(session, callback.from_user.id)
        if user:
            user.gender = 'female'
            await session.commit()
            logger.info(f"User {user.telegram_id} selected gender: female")

    # Move to birth date input
    await state.set_state(OnboardingStates.entering_birth_date)

    await callback.message.edit_text(
        "üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1995\n\n"
        "–í–æ–∑—Ä–∞—Å—Ç –≤–∞–∂–µ–Ω –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ ‚Äî —Ä–µ—à–µ–Ω–∏—è –¥–ª—è 20 –∏ 40 –ª–µ—Ç —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è.",
        parse_mode="HTML"
    )
    await callback.answer()

# New onboarding handlers
@router.message(OnboardingStates.entering_birth_date)
async def handle_birth_date_input(message: Message, state: FSMContext):
    """Handle birth date input"""
    from bot.states import OnboardingStates

    # Validate birth date
    is_valid, result = validate_birth_date(message.text)

    if not is_valid:
        # Send error message
        await message.answer(result)
        return

    # Save birth date to database
    birth_date = result
    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id

        user = await get_user_by_telegram_id(session, message.from_user.id)
        if user:
            user.birth_date = birth_date
            await session.commit()
            logger.info(f"User {user.telegram_id} entered birth date: {birth_date}")

    # Move to occupation input
    await state.set_state(OnboardingStates.entering_occupation)

    await message.answer(
        "üíº –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?\n\n"
        "–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ (1-3 —Å–ª–æ–≤–∞):\n"
        "‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –≤ IT\n"
        "‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç –ú–ì–£\n"
        "‚Ä¢ –°–≤–æ–π –±–∏–∑–Ω–µ—Å (–∫–∞—Ñ–µ)\n"
        "‚Ä¢ –ù–µ —Ä–∞–±–æ—Ç–∞—é\n"
        "‚Ä¢ –∏ —Ç.–¥."
    )


@router.message(OnboardingStates.entering_occupation)
async def handle_occupation_input(message: Message, state: FSMContext):
    """Handle occupation input"""
    from bot.states import OnboardingStates

    occupation = message.text.strip()

    # Basic validation
    if len(occupation) < 2:
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    if len(occupation) > 100:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –£–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    # Save occupation to database
    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id

        user = await get_user_by_telegram_id(session, message.from_user.id)
        if user:
            user.occupation = occupation
            await session.commit()
            logger.info(f"User {user.telegram_id} entered occupation: {occupation}")

    # Move to work format selection
    await state.set_state(OnboardingStates.choosing_work_format)

    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –î–æ–º–∞ (—É–¥–∞–ª–µ–Ω–Ω–æ)", callback_data="work_format_remote")
    builder.button(text="üè¢ –í –æ—Ñ–∏—Å–µ", callback_data="work_format_office")
    builder.button(text="üîÄ –ì–∏–±—Ä–∏–¥ (–¥–æ–º + –æ—Ñ–∏—Å)", callback_data="work_format_hybrid")
    builder.button(text="üéì –£—á—É—Å—å / –Ω–µ —Ä–∞–±–æ—Ç–∞—é", callback_data="work_format_student")
    builder.adjust(1)

    await message.answer(
        "üè† –ì–¥–µ —Ä–∞–±–æ—Ç–∞–µ—à—å?",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("work_format_"))
async def handle_work_format_selection(callback: CallbackQuery, state: FSMContext):
    """Handle work format selection"""
    from bot.database.crud_subscriptions import get_user_by_referral_code, create_referral

    work_format = callback.data.replace("work_format_", "")

    # Save work format to database
    async with AsyncSessionLocal() as session:
        from bot.database.crud import get_user_by_telegram_id

        user = await get_user_by_telegram_id(session, callback.from_user.id)
        if user:
            user.work_format = work_format
            await session.commit()
            logger.info(f"User {user.telegram_id} selected work format: {work_format}")

        # Process referral if stored in state
        data = await state.get_data()
        referral_code = data.get('referral_code')
        referral_bonus_message = ""

        if referral_code and user:
            try:
                referrer = await get_user_by_referral_code(session, referral_code)
                if referrer and referrer.id != user.id:
                    # Create referral record and grant rewards
                    await create_referral(session, referrer.id, user.id)
                    gender_word = "–ø–æ–ª—É—á–∏–ª" if user.gender == "male" else "–ø–æ–ª—É—á–∏–ª–∞"
                    referral_bonus_message = f"\n\n‚ú® <b>–ë–æ–Ω—É—Å!</b> –¢—ã {gender_word} +1 —Ä–µ—à–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∞!\n"

                    # Notify referrer
                    try:
                        await callback.bot.send_message(
                            referrer.telegram_id,
                            "üéâ <b>–¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!</b>\n\n"
                            "–¢—ã –ø–æ–ª—É—á–∏–ª +1 –±–æ–Ω—É—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.warning(f"Failed to notify referrer {referrer.telegram_id}: {e}")

                    logger.info(f"Referral processed: {referrer.id} -> {user.id}")
            except Exception as e:
                logger.error(f"Error processing referral: {e}")

    # Clear onboarding state
    await state.clear()

    # Send welcome message
    welcome_text = f"""‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.

–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ—É—á –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º. –ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.

üí¨ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ó–∞–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —É–≤–∏–¥–µ—Ç—å —Å—É—Ç—å
‚Ä¢ –ù–∞—Ö–æ–∂—É –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–º–ø—Ç–æ–º—ã
‚Ä¢ –î–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏

‚ö° <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º:</b>
1. –¢—ã –æ–ø–∏—Å—ã–≤–∞–µ—à—å –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
2. –Ø –∑–∞–¥–∞—é 3-5 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
3. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ—à–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏{referral_bonus_message}

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏! üëá"""

    await callback.message.edit_text(
        text=welcome_text,
        parse_mode="HTML"
    )
    await callback.message.answer(
        "üëá",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()
