from typing import Dict, List


class PromptBuilder:
    """Builds dynamic prompts for Claude API"""

    def __init__(self):
        """Initialize with the optimized system prompt"""
        self.system_prompt = self._build_core_prompt()
        print("‚úÖ PromptBuilder initialized with optimized prompt")

    def _build_core_prompt(self) -> str:
        """Build the core system prompt for Claude"""
        return """–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ—É—á, –ø–æ–º–æ–≥–∞–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–∞—Ö. –û–±—â–∞–µ—à—å—Å—è —Ç–µ–ø–ª–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏ –Ω–∞ "—Ç—ã", –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä—â–∏–Ω—ã. –ü—Ä–∏–∑–Ω–∞—ë—à—å —ç–º–æ—Ü–∏–∏, –Ω–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–µ—à—å –ø—Ä–æ–±–ª–µ–º—É.

# –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ (3-5 –≤–æ–ø—Ä–æ—Å–æ–≤)

**–ó–∞–¥–∞–≤–∞–π –ü–û –û–î–ù–û–ú–£ –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑!** –ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

–¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
- –ö–æ–Ω—Ç–µ–∫—Å—Ç: "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å? –ö—Ç–æ –≤–æ–≤–ª–µ—á—ë–Ω?"
- –≠–º–æ—Ü–∏–∏: "–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å?"
- –ü–æ–ø—ã—Ç–∫–∏: "–ß—Ç–æ –ø—Ä–æ–±–æ–≤–∞–ª?"
- –¶–µ–ª—å: "–ö–∞–∫–∏–º –≤–∏–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?"
- –®–∫–∞–ª–∞: "–û—Ç 1 –¥–æ 10, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
- –ò—Å–∫–ª—é—á–µ–Ω–∏—è: "–ö–æ–≥–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—Ç?"
- –ì–ª—É–±–∏–Ω–∞: "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –æ–±–æ—Å—Ç—Ä–µ–Ω–∏–µ–º?"

–ù–ï –∑–∞–¥–∞–≤–∞–π: –∑–∞–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–∞/–Ω–µ—Ç), –≤–æ–ø—Ä–æ—Å—ã —Å "–ø–æ—á–µ–º—É", –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–∑—É.

# –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï (–º–∞–∫—Å 2000 —Å–∏–º–≤–æ–ª–æ–≤)

üéØ –í –ß–Å–ú –°–£–¢–¨
[1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∂–∏ —á—Ç–æ –ø–æ–Ω—è–ª –≥–ª—É–±–∂–µ]

üí° –ü–û–ß–ï–ú–£ –¢–ê–ö –ü–†–û–ò–°–•–û–î–ò–¢
[2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏]

üìã –ß–¢–û –î–ï–õ–ê–¢–¨ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°
‚ñ° [–ú–∏–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏–µ 5-15 –º–∏–Ω]
‚ñ° [–í—Ç–æ—Ä–æ–µ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ]

üìã –ù–ê –≠–¢–û–ô –ù–ï–î–ï–õ–ï
‚ñ° [–° –¥–µ–¥–ª–∞–π–Ω–æ–º]
‚ñ° [–° —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π]
‚ñ° [–° –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º]

üìã –î–û–õ–ì–û–°–†–û–ß–ù–û
‚ñ° [–°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏]

üìà –ö–ê–ö –ü–û–ô–ú–Å–®–¨ –ß–¢–û –†–ê–ë–û–¢–ê–ï–¢
‚Ä¢ [–ò–∑–º–µ—Ä–∏–º–∞—è –º–µ—Ç—Ä–∏–∫–∞]
‚Ä¢ [–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä]

‚ö° –ï–°–õ–ò –ó–ê–°–¢–†–Ø–ù–ï–®–¨
[–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ —Å—Ä—ã–≤]

üí¨ P.S.
[–ú–æ—Ç–∏–≤–∞—Ü–∏—è/–≤–æ–ø—Ä–æ—Å]

# –ü–†–ê–í–ò–õ–ê

‚úÖ –î–µ–ª–∞–π: quick wins, –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ ("–ª–æ–∂–∏—Ç—å—Å—è –≤ 23:00", –Ω–µ "–±–æ–ª—å—à–µ —Å–ø–∞—Ç—å"), –∑–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
‚ùå –ù–µ –¥–µ–ª–∞–π: –æ–±–≤–∏–Ω–µ–Ω–∏—è, –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏, –∏–≥–Ω–æ—Ä —ç–º–æ—Ü–∏–π, —Ç–µ—Ä–º–∏–Ω—ã (5 Why's, Fishbone)

–û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏:
- –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ ‚Üí –±–∞–∑–æ–≤—ã–π —Å–æ–≤–µ—Ç + "–æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É"
- –û—Ç–Ω–æ—à–µ–Ω–∏—è ‚Üí —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞
- –î–µ–Ω—å–≥–∏ ‚Üí –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
- –ó–¥–æ—Ä–æ–≤—å–µ ‚Üí –ù–ï –¥–∏–∞–≥–Ω–æ–∑, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –≤—Ä–∞—á—É

–í–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"""

    def build_system_prompt(self) -> str:
        """
        Get the system prompt for Claude

        Returns:
            Complete system prompt
        """
        return self.system_prompt

    def build_questioning_context(
        self,
        problem_description: str,
        conversation_history: List[Dict],
        current_step: int,
    ) -> str:
        """Build context for generating next question"""
        # Only send last 2 Q&A pairs to save tokens
        recent_history = conversation_history[-4:] if len(conversation_history) > 4 else conversation_history

        history_text = "\n".join([
            f"{'Q' if msg['role'] == 'assistant' else 'A'}: {msg['content']}"
            for msg in recent_history
        ]) if recent_history else "(–Ω–∞—á–∞–ª–æ)"

        return f"""–ü—Ä–æ–±–ª–µ–º–∞: {problem_description}

–ò—Å—Ç–æ—Ä–∏—è:
{history_text}

–í–æ–ø—Ä–æ—Å {current_step}/5. –ó–∞–¥–∞–π –û–î–ò–ù —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–º–∞–∫—Å 50 —Å–ª–æ–≤). –ë–µ–∑ –ø—Ä–µ–∞–º–±—É–ª—ã."""

    def build_solution_context(
        self,
        problem_description: str,
        conversation_history: List[Dict]
    ) -> str:
        """Build context for generating final solution"""
        # Compact conversation format
        conversation_text = "\n".join([
            f"{'Q' if msg['role'] == 'assistant' else 'A'}: {msg['content']}"
            for msg in conversation_history
        ])

        return f"""–ü—Ä–æ–±–ª–µ–º–∞: {problem_description}

–ê–Ω–∞–ª–∏–∑:
{conversation_text}

–°–æ–∑–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞. –ú–∞–∫—Å 2000 —Å–∏–º–≤–æ–ª–æ–≤."""
