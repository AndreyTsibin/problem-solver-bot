import anthropic
from typing import Dict, List
import time
from bot.config import CLAUDE_API_KEY
from bot.services.prompt_builder import PromptBuilder


class ClaudeService:
    """Service for interacting with Claude API"""

    def __init__(self):
        self.client = anthropic.Anthropic(api_key=CLAUDE_API_KEY)
        self.model = "claude-sonnet-4-5-20250929"  # Updated to latest model
        self.max_retries = 3
        self.prompt_builder = PromptBuilder()

    async def generate_question(
        self,
        problem_description: str,
        conversation_history: List[Dict],
        step: int
    ) -> str:
        """
        Generate next question based on conversation history

        Args:
            problem_description: Original problem statement
            conversation_history: List of {"role": "user|assistant", "content": "..."}
            step: Current question number (1-5)

        Returns:
            Next question to ask user
        """
        # Build context
        context = self.prompt_builder.build_questioning_context(
            problem_description=problem_description,
            conversation_history=conversation_history,
            current_step=step
        )

        try:
            message = self.client.messages.create(
                model=self.model,
                max_tokens=300,
                system=self.prompt_builder.build_system_prompt(),
                messages=[{"role": "user", "content": context}]
            )

            question = message.content[0].text.strip()
            return question

        except Exception as e:
            print(f"‚ùå Error generating question: {e}")
            # Fallback generic question
            return f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–∏—Ç—É–∞—Ü–∏–∏ (–≤–æ–ø—Ä–æ—Å {step}/5)"

    async def generate_solution(
        self,
        problem_description: str,
        conversation_history: List[Dict]
    ) -> str:
        """
        Generate final solution with action plan

        Args:
            problem_description: Original problem
            conversation_history: Full Q&A history

        Returns:
            Formatted solution text with emojis and structure
        """
        # Build context
        context = self.prompt_builder.build_solution_context(
            problem_description=problem_description,
            conversation_history=conversation_history
        )

        for attempt in range(self.max_retries):
            try:
                message = self.client.messages.create(
                    model=self.model,
                    max_tokens=2500,
                    system=self.prompt_builder.build_system_prompt(),
                    messages=[{"role": "user", "content": context}]
                )

                solution = message.content[0].text.strip()
                return solution

            except Exception as e:
                print(f"‚ùå Error generating solution (attempt {attempt+1}/{self.max_retries}): {e}")
                if attempt == self.max_retries - 1:
                    # Return fallback
                    return """üéØ **–í –ß–Å–ú –°–£–¢–¨**
–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.

üí° **–ü–û–ß–ï–ú–£ –¢–ê–ö –ü–†–û–ò–°–•–û–î–ò–¢**
–í–æ–∑–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

üìã **–ß–¢–û –î–ï–õ–ê–¢–¨ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°**
‚ñ° –ù–∞–∂–º–∏ "üîÑ –ù–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞" –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞
‚Üí –ò–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è

üí¨ **P.S.**
–ò–∑–≤–∏–Ω–∏ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –û–±—ã—á–Ω–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ."""
                time.sleep(2 ** attempt)
